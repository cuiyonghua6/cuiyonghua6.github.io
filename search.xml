<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python...]]></title>
    <url>%2F2020%2F06%2Fdatabase%2Fmy-post2%2F</url>
    <content type="text"><![CDATA[背景近年来大数据BigData、人工智能AI、物联网Iot等行业发展迅猛，很多人都想要从事大数据技术开发工作，但是，请问要怎么做，路线是什么？从哪里开始学？学哪些？这是一个大问题。对于我自己来说，最近也在学一些大数据开发相关的技术，所以之前整理了一份《大数据技术学习路线》，希望对你有所帮助。 学习规划总共分为五大部分，分别是： 大数据技术基础 离线计算Hadoop 流式计算Storm 内存计算Spark 机器学习算法 目前我学完了约60%的内容，但还有很多需要多实践、和深研的地方，我也在继续学习，和摸索当中。希望你早日能成为大数据技术开发中的一员，然后大家一起学习，和技术交流。 技术说明这里我只列举了技术点，给你提供了一个学习方向，具体实现内容可以借助网络去学习了，相信这方面你应该懂得了如何借助网络力量，然后进行自我学习了。 大数据技术基础linux操作基础 linux系统简介与安装 linux常用命令–文件操作 linux常用命令–用户管理与权限 linux常用命令–系统管理 linux常用命令–免密登陆配置与网络管理 linux上常用软件安装 linux本地yum源配置及yum软件安装 linux防火墙配置 linux高级文本处理命令cut、sed、awk linux定时任务crontab shell编程 shell编程–基本语法 shell编程–流程控制 shell编程–函数 shell编程–综合案例–自动化部署脚本 内存数据库redis redis和nosql简介 redis客户端连接 redis的string类型数据结构操作及应用-对象缓存 redis的list类型数据结构操作及应用案例-任务调度队列 redis的hash及set数据结构操作及应用案例-购物车 redis的sortedset数据结构操作及应用案例-排行榜 布式协调服务zookeeper zookeeper简介及应用场景 zookeeper集群安装部署 zookeeper的数据节点与命令行操作 zookeeper的java客户端基本操作及事件监听 zookeeper核心机制及数据节点 zookeeper应用案例–分布式共享资源锁 zookeeper应用案例–服务器上下线动态感知 zookeeper的数据一致性原理及leader选举机制 java高级特性增强 Java多线程基本知识 Java同步关键词详解 java并发包线程池及在开源软件中的应用 Java并发包消息队里及在开源软件中的应用 Java JMS技术 Java动态代理反射 轻量级RPC框架开发 RPC原理学习 Nio原理学习 Netty常用API学习 轻量级RPC框架需求分析及原理分析 轻量级RPC框架开发 离线计算Hadoophadoop快速入门 hadoop背景介绍 分布式系统概述 离线数据分析流程介绍 集群搭建 集群使用初步 HDFS增强 HDFS的概念和特性 HDFS的shell(命令行客户端)操作 HDFS的工作机制 NAMENODE的工作机制 java的api操作 案例1：开发shell采集脚本 MAPREDUCE详解 自定义hadoop的RPC框架 Mapreduce编程规范及示例编写 Mapreduce程序运行模式及debug方法 mapreduce程序运行模式的内在机理 mapreduce运算框架的主体工作流程 自定义对象的序列化方法 MapReduce编程案例 MAPREDUCE增强 Mapreduce排序 自定义partitioner Mapreduce的combiner mapreduce工作机制详解 MAPREDUCE实战 maptask并行度机制-文件切片 maptask并行度设置 倒排索引 共同好友 federation介绍和hive使用 Hadoop的HA机制 HA集群的安装部署 集群运维测试之Datanode动态上下线 集群运维测试之Namenode状态切换管理 集群运维测试之数据块的balance HA下HDFS-API变化 hive简介 hive架构 hive安装部署 hvie初使用 hive增强和flume介绍 HQL-DDL基本语法 HQL-DML基本语法 HIVE的join HIVE 参数配置 HIVE 自定义函数和Transform HIVE 执行HQL的实例分析 HIVE最佳实践注意点 HIVE优化策略 HIVE实战案例 Flume介绍 Flume的安装部署 案例：采集目录到HDFS 案例：采集文件到HDFS 流式计算StormStorm从入门到精通 Storm是什么 Storm架构分析 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Storm集群部署实战 Storm+Kafka+Redis业务指标计算 Storm源码下载编译 Strom集群启动及源码分析 Storm任务提交及源码分析 Storm数据发送流程分析 Storm通信机制分析 Storm消息容错机制及源码分析 Storm多stream项目分析 编写自己的流式任务执行框架 Storm上下游及架构集成 消息队列是什么 Kakfa核心组件 Kafka集群部署实战及常用命令 Kafka配置文件梳理 Kakfa JavaApi学习 Kafka文件存储机制分析 Redis基础及单机环境部署 Redis数据结构及典型案例 Flume快速入门 Flume+Kafka+Storm+Redis整合 内存计算Sparkscala编程 scala编程介绍 scala相关软件安装 scala基础语法 scala方法和函数 scala函数式编程特点 scala数组和集合 scala编程练习（单机版WordCount） scala面向对象 scala模式匹配 actor编程介绍 option和偏函数 实战：actor的并发WordCount 柯里化 隐式转换 AKKA与RPC Akka并发编程框架 实战：RPC编程实战 Spark快速入门 spark介绍 spark环境搭建 RDD简介 RDD的转换和动作 实战：RDD综合练习 RDD高级算子 自定义Partitioner 实战：网站访问次数 广播变量 实战：根据IP计算归属地 自定义排序 利用JDBC RDD实现数据导入导出 WorldCount执行流程详解 RDD详解 RDD依赖关系 RDD缓存机制 RDD的Checkpoint检查点机制 Spark任务执行过程分析 RDD的Stage划分 Spark-Sql应用 Spark-SQL Spark结合Hive DataFrame 实战：Spark-SQL和DataFrame案例 SparkStreaming应用实战 Spark-Streaming简介 Spark-Streaming编程 实战：StageFulWordCount Flume结合Spark Streaming Kafka结合Spark Streaming 窗口函数 ELK技术栈介绍 ElasticSearch安装和使用 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Spark核心源码解析 Spark源码编译 Spark远程debug Spark任务提交行流程源码分析 Spark通信流程源码分析 SparkContext创建过程源码分析 DriverActor和ClientActor通信过程源码分析 Worker启动Executor过程源码分析 Executor向DriverActor注册过程源码分析 Executor向Driver注册过程源码分析 DAGScheduler和TaskScheduler源码分析 Shuffle过程源码分析 Task执行过程源码分析 机器学习算法python及numpy库 机器学习简介 机器学习与python python语言–快速入门 python语言–数据类型详解 python语言–流程控制语句 python语言–函数使用 python语言–模块和包 phthon语言–面向对象 python机器学习算法库–numpy 机器学习必备数学知识–概率论 常用算法实现 knn分类算法–算法原理 knn分类算法–代码实现 knn分类算法–手写字识别案例 lineage回归分类算法–算法原理 lineage回归分类算法–算法实现及demo 朴素贝叶斯分类算法–算法原理 朴素贝叶斯分类算法–算法实现 朴素贝叶斯分类算法–垃圾邮件识别应用案例 kmeans聚类算法–算法原理 kmeans聚类算法–算法实现 kmeans聚类算法–地理位置聚类应用 决策树分类算法–算法原理 决策树分类算法–算法实现 尾记 看完有信心能坚持学习吗？如果你的答案是肯定的，那就当下开始行动吧！Fighting~ 推荐两个相关的学习博客地址： Hadoop学习教程 Hadoop家族系列文章 Hadoop使用教程]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PostgreSQL的内部结构]]></title>
    <url>%2F2020%2F04%2Fmy-post6%2F</url>
    <content type="text"><![CDATA[聊两个问题，它们看似和推荐系统没有必然关系，但实际上，在你构建自己的推荐系统的时候，不可避免地会遇到这两个问题。 一. 去重是刚需–0099在推荐系统中，有一个刚需就是去重，那么说在哪些地方有去重的需求呢？主要是在两个地方：一个是内容源去重，另一个是不重复给用户推荐。 先说说内容源的去重。 如果一个平台自己不生产内容，只是做内容搬运和聚合分发，那么从大量第三方的内容生产处抓取内容，就难免遇到相似甚至重复的内容。这就需要对内容做一个重复检测了。 对内容做重复检测，直观的思路是分词，然后提取关键词，再两两计算词向量之间的距离，距离小于一定阈值后就判定为重复。然而，这对于海量内容，比如几千万以上的内容来说简直就是灾难。 其实，内容源去重并不是仅在推荐系统中才首次出现，这早在搜索引擎时代就是一个刚需了，搜索引擎把整个互联网的网页都下载到自己的服务器上，这时，重复冗余的内容就需要被检测出来。 另一个需求是在内容阅读类推荐场景下，给用户推荐的内容不要重复，推荐过的内容就不再出现在推荐候选集中。 在你刷一个信息流产品时，不断看到重复的内容，想必不是使用感很好的一件事。因为以抓取作为主要内容来源的信息流产品，不同于社交网站上用户自发产生内容，除非遇到用户恶意发送，否则后者是不容易重复的。 以上两个场景，需要在你打造自己的推荐系统时予以考虑和应对。 今天就介绍两种最常见的去重算法，两者有相通之处也有不同的之处。 1. Simhash内容重复检测，是搜索引擎公司最先遇到的，所以 Google 在 07 年公开了他们内部的内容重复检测算法，这个算法简单有效，甚至造福了今天的信息流推荐产品。 对于很长的内容，如果只是检测绝对重复，也就是说完全一模一样的那种情况，那么使用 MD5 这样的信息指纹方法非常高效，无需再去分词、提取关键词和计算关键词向量之间的距离。 我们直接将原始的内容映射为一个短字符串，这个短字符串就是原始内容的指纹，虽然不是绝对保证和原始内容一一映射，但是不同内容能得到相同指纹的概率非常小。 只是这种信息指纹的方法有个非常明显的坏处就是，哪怕原始内容改一个字，得到的信息指纹就会截然不同。 这就没法愉快地玩耍了，你一定希望的是只要主要内容不变，就算一些不太重要的词句不同，也仍然可以得到相近甚至相同的指纹。这才能更加灵活地进行内容重复检测。是否有这样的算法？有，就是 Simhash。 Simhash 核心思想也是为每个内容生成一个整数表示的指纹，然后用这个指纹去做重复或者相似的检测。下面这个示意图说明了 Simhash 如何把一个原始内容表示成一个整数指纹。 好，现在详细说明一下这个过程。 首先，对原始内容分词，并且计算每个词的权重； 对每个词哈希成一个整数，并且把这个整数对应的二进制序列中的 0 变成 -1，1 还是 1，得到一个 1 和 -1 组成的向量； 把每个词哈希后的向量乘以词的权重，得到一个新的加权向量； 把每个词的加权向量相加，得到一个最终向量，这个向量中每个元素有正有负； 把最终这个向量中元素为正的替换成 1，为负的替换成 0，这个向量变成一个二进制位序列，也就是最终变成了一个整数。 最终这个整数就代表了原始的内容。这个 Simhash 奇妙在哪呢？ 看这个示意图中，故意加了一个不太重要的词“了”，它的权重是 1，对应的加权向量元素不是 1 就是 -1，在上述的第四步中，如果这个词对应的向量缺少了，其实根本不影响最终得到那个整数，因为它很难改变最终向量元素的正负。这就是为什么那些不太重要的词不影响内容之间的重复检测。 Simhash 为每一个内容生成一个整数指纹，其中的关键是把每个词哈希成一个整数，这一步常常采用 Jenkins 算法。这里简单示意的整数只有 8 个二进制位，实际上可能需要 64 个二进制位的整数，甚至范围更大。 得到每个内容的 Simhash 指纹后，可以两两计算汉明距离，比较二进制位不同个数，其实就是计算两个指纹的异或，异或结果中如果包含 3 个以下的 1，则认为两条内容重复。 为了高效，也可以直接认为指纹相同才重复，视情况而定。 2. Bloomfilter除了内容重复检测，还有一个需求是防止已经推荐的内容被重复推荐。这个刚需和上述内容重复相比，最大的不同就是过滤对象不同，上述 Simhash 过滤对象是内容本身，而这里则一般是内容的 ID。 内容的 ID 一般是用一个 UUID 表示，是一个不太长的字符串或者整数。 对于这类形如模式串的去重，显然可以用单独专门的数据库来保存，为了高效，甚至可以为它建上索引。 但对于用户量巨大的情况下，这个做法对存储的消耗则不可小看。实际上，解决这类看一个字符串在不在一个集合中的问题，有一个有点老但很好用的做法，就是 Bloomfilter，有时候也被称为布隆过滤器。 布隆过滤器的原理也要用到哈希函数。它包含两部分：一个很长的二进制位向量，和一系列哈希函数。Bloomfilter 是一个很巧妙的设计，它先把原始要查询的集合映射到一个长度为 m 的二进制位向量上去，它映射的方法是： 设计 n 个互相独立的哈希函数，准备一个长度为 m 的二进制向量，最开始全是 0； 每个哈希函数把集合内的元素映射为一个不超过 m 的正整数 k，m 就是二进制向量的长度； 把这个二进制向量中的第 k 个位置设置为 1；也就是一个元素会在二进制向量中对应 n 个位置为 1。 看示意图。 这个示意图中，原始的模式串经过三个互相独立的哈希函数，映射到 8 位二进制向量中的三个位置了。 原始的模式串集合经过这样的处理后，就得到一个很大的二进制向量。在应用阶段时，假如来了一个模式串 s，需要查询是否在这个集合中，也需要经过同样的上述步骤。 每个哈希函数对这个模式串 s 哈希后都得到一个整数，看看这个整数在二进制向量中所指示的位置是不是 1，如果每个哈希函数所指示的位置都是 1，就说明模式串 s 已经在集合中了。 需要说明的是，Bloomfilter 也并不是百分之百保证的，有很小的概率把原本不存在集合中的模式串判断为存在。这样就会造成那些明明还没有推荐给用户的内容 ID 就再也不会推荐给用户了，当然，这个小概率是可以承受的。 总结介绍了两种去重算法。在推荐系统中，虽然我们十分关心推荐匹配的效果，但是别忘了，对原始内容的挖掘和清洗往往更加重要。这其中就包括对重复内容的检测。 两种去重策略都是牺牲一点误伤的概率换得大幅度的效率提升，具体的做法都是要借助哈希函数。只是哈希函数的结果在两个算法中有不同的处理手段，Simhash 是加权，Bloomfilter 则是用来做寻址。 有一个思考题，请你想一想，如果要从 Bloomfilter 中去掉一个元素，该怎么做？有兴趣，可以一起探讨一下。 共勉，(๑•̀ㅂ•́)و✧加油 Minbo]]></content>
      <categories>
        <category>数据库</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【应用算法】信息流-推荐系统的去重策略]]></title>
    <url>%2F2019%2F09%2Fmy-post5%2F</url>
    <content type="text"><![CDATA[聊两个问题，它们看似和推荐系统没有必然关系，但实际上，在你构建自己的推荐系统的时候，不可避免地会遇到这两个问题。 去重是刚需在推荐系统中，有一个刚需就是去重，那么说在哪些地方有去重的需求呢？主要是在两个地方：一个是内容源去重，另一个是不重复给用户推荐。 先说说内容源的去重。 如果一个平台自己不生产内容，只是做内容搬运和聚合分发，那么从大量第三方的内容生产处抓取内容，就难免遇到相似甚至重复的内容。这就需要对内容做一个重复检测了。 对内容做重复检测，直观的思路是分词，然后提取关键词，再两两计算词向量之间的距离，距离小于一定阈值后就判定为重复。然而，这对于海量内容，比如几千万以上的内容来说简直就是灾难。 其实，内容源去重并不是仅在推荐系统中才首次出现，这早在搜索引擎时代就是一个刚需了，搜索引擎把整个互联网的网页都下载到自己的服务器上，这时，重复冗余的内容就需要被检测出来。 另一个需求是在内容阅读类推荐场景下，给用户推荐的内容不要重复，推荐过的内容就不再出现在推荐候选集中。 在你刷一个信息流产品时，不断看到重复的内容，想必不是使用感很好的一件事。因为以抓取作为主要内容来源的信息流产品，不同于社交网站上用户自发产生内容，除非遇到用户恶意发送，否则后者是不容易重复的。 以上两个场景，需要在你打造自己的推荐系统时予以考虑和应对。 今天就介绍两种最常见的去重算法，两者有相通之处也有不同的之处。 1. Simhash内容重复检测，是搜索引擎公司最先遇到的，所以 Google 在 07 年公开了他们内部的内容重复检测算法，这个算法简单有效，甚至造福了今天的信息流推荐产品。 对于很长的内容，如果只是检测绝对重复，也就是说完全一模一样的那种情况，那么使用 MD5 这样的信息指纹方法非常高效，无需再去分词、提取关键词和计算关键词向量之间的距离。 我们直接将原始的内容映射为一个短字符串，这个短字符串就是原始内容的指纹，虽然不是绝对保证和原始内容一一映射，但是不同内容能得到相同指纹的概率非常小。 只是这种信息指纹的方法有个非常明显的坏处就是，哪怕原始内容改一个字，得到的信息指纹就会截然不同。 这就没法愉快地玩耍了，你一定希望的是只要主要内容不变，就算一些不太重要的词句不同，也仍然可以得到相近甚至相同的指纹。这才能更加灵活地进行内容重复检测。是否有这样的算法？有，就是 Simhash。 Simhash 核心思想也是为每个内容生成一个整数表示的指纹，然后用这个指纹去做重复或者相似的检测。下面这个示意图说明了 Simhash 如何把一个原始内容表示成一个整数指纹。 好，现在详细说明一下这个过程。 首先，对原始内容分词，并且计算每个词的权重； 对每个词哈希成一个整数，并且把这个整数对应的二进制序列中的 0 变成 -1，1 还是 1，得到一个 1 和 -1 组成的向量； 把每个词哈希后的向量乘以词的权重，得到一个新的加权向量； 把每个词的加权向量相加，得到一个最终向量，这个向量中每个元素有正有负； 把最终这个向量中元素为正的替换成 1，为负的替换成 0，这个向量变成一个二进制位序列，也就是最终变成了一个整数。 最终这个整数就代表了原始的内容。这个 Simhash 奇妙在哪呢？ 看这个示意图中，故意加了一个不太重要的词“了”，它的权重是 1，对应的加权向量元素不是 1 就是 -1，在上述的第四步中，如果这个词对应的向量缺少了，其实根本不影响最终得到那个整数，因为它很难改变最终向量元素的正负。这就是为什么那些不太重要的词不影响内容之间的重复检测。 Simhash 为每一个内容生成一个整数指纹，其中的关键是把每个词哈希成一个整数，这一步常常采用 Jenkins 算法。这里简单示意的整数只有 8 个二进制位，实际上可能需要 64 个二进制位的整数，甚至范围更大。 得到每个内容的 Simhash 指纹后，可以两两计算汉明距离，比较二进制位不同个数，其实就是计算两个指纹的异或，异或结果中如果包含 3 个以下的 1，则认为两条内容重复。 为了高效，也可以直接认为指纹相同才重复，视情况而定。 2. Bloomfilter除了内容重复检测，还有一个需求是防止已经推荐的内容被重复推荐。这个刚需和上述内容重复相比，最大的不同就是过滤对象不同，上述 Simhash 过滤对象是内容本身，而这里则一般是内容的 ID。 内容的 ID 一般是用一个 UUID 表示，是一个不太长的字符串或者整数。 对于这类形如模式串的去重，显然可以用单独专门的数据库来保存，为了高效，甚至可以为它建上索引。 但对于用户量巨大的情况下，这个做法对存储的消耗则不可小看。实际上，解决这类看一个字符串在不在一个集合中的问题，有一个有点老但很好用的做法，就是 Bloomfilter，有时候也被称为布隆过滤器。 布隆过滤器的原理也要用到哈希函数。它包含两部分：一个很长的二进制位向量，和一系列哈希函数。Bloomfilter 是一个很巧妙的设计，它先把原始要查询的集合映射到一个长度为 m 的二进制位向量上去，它映射的方法是： 设计 n 个互相独立的哈希函数，准备一个长度为 m 的二进制向量，最开始全是 0； 每个哈希函数把集合内的元素映射为一个不超过 m 的正整数 k，m 就是二进制向量的长度； 把这个二进制向量中的第 k 个位置设置为 1；也就是一个元素会在二进制向量中对应 n 个位置为 1。 看示意图。 这个示意图中，原始的模式串经过三个互相独立的哈希函数，映射到 8 位二进制向量中的三个位置了。 原始的模式串集合经过这样的处理后，就得到一个很大的二进制向量。在应用阶段时，假如来了一个模式串 s，需要查询是否在这个集合中，也需要经过同样的上述步骤。 每个哈希函数对这个模式串 s 哈希后都得到一个整数，看看这个整数在二进制向量中所指示的位置是不是 1，如果每个哈希函数所指示的位置都是 1，就说明模式串 s 已经在集合中了。 需要说明的是，Bloomfilter 也并不是百分之百保证的，有很小的概率把原本不存在集合中的模式串判断为存在。这样就会造成那些明明还没有推荐给用户的内容 ID 就再也不会推荐给用户了，当然，这个小概率是可以承受的。 总结介绍了两种去重算法。在推荐系统中，虽然我们十分关心推荐匹配的效果，但是别忘了，对原始内容的挖掘和清洗往往更加重要。这其中就包括对重复内容的检测。 两种去重策略都是牺牲一点误伤的概率换得大幅度的效率提升，具体的做法都是要借助哈希函数。只是哈希函数的结果在两个算法中有不同的处理手段，Simhash 是加权，Bloomfilter 则是用来做寻址。 有一个思考题，请你想一想，如果要从 Bloomfilter 中去掉一个元素，该怎么做？有兴趣，可以一起探讨一下。 共勉，(๑•̀ㅂ•́)و✧加油 Minbo]]></content>
      <categories>
        <category>算法</category>
        <category>推荐系统</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>信息流</tag>
        <tag>推荐系统</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取百度图片并把图片存到本地]]></title>
    <url>%2F2019%2F07%2Fpython%2Fspider%2F%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[爬取百度图片并把图片存到本地：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115import reimport requestsfrom urllib import errorfrom bs4 import BeautifulSoupimport osnum = 0numPicture = 0file = ''List = []def Find(url): global List print('正在检测图片总数，请稍等.....') t = 0 i = 1 s = 0 while t &lt; 1000: Url = url + str(t) try: Result = requests.get(Url, timeout=7) except BaseException: t = t + 60 continue else: result = Result.text pic_url = re.findall('"objURL":"(.*?)",', result, re.S) # 先利用正则表达式找到图片url s += len(pic_url) if len(pic_url) == 0: break else: List.append(pic_url) t = t + 60 return sdef recommend(url): Re = [] try: html = requests.get(url) except error.HTTPError as e: return else: html.encoding = 'utf-8' bsObj = BeautifulSoup(html.text, 'html.parser') div = bsObj.find('div', id='topRS') if div is not None: listA = div.findAll('a') for i in listA: if i is not None: Re.append(i.get_text()) return Redef dowmloadPicture(html, keyword): global num # t =0 pic_url = re.findall('"objURL":"(.*?)",', html, re.S) # 先利用正则表达式找到图片url print('找到关键词:' + keyword + '的图片，即将开始下载图片...') for each in pic_url: print('正在下载第' + str(num + 1) + '张图片，图片地址:' + str(each)) try: if each is not None: pic = requests.get(each, timeout=7) else: continue except BaseException: print('错误，当前图片无法下载') continue else: string = file + r'\\' + keyword + '_' + str(num) + '.jpg' fp = open(string, 'wb') fp.write(pic.content) fp.close() num += 1 if num &gt;= numPicture: returnif __name__ == '__main__': # 主函数入口 word = input("请输入搜索关键词(可以是人名，地名等): ") # 比如百度图片上搜索：苹果 # add = 'http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=%e8%8b%b9%e6%9e%9c&amp;pn=120' url = 'http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=' + word + '&amp;pn=' tot = Find(url) Recommend = recommend(url) # 记录相关推荐 print('经过检测&#123;&#125;类图片共有&#123;&#125;张'.format(word, tot)) numPicture = int(input('请输入想要下载的图片数量： ')) file = input('请建立一个存储图片的文件夹，输入文件夹名称即可：') y = os.path.exists(file) if y == 1: print('该文件已存在，请重新输入') file = input('请建立一个存储图片的文件夹，)输入文件夹名称即可') os.mkdir(file) else: os.mkdir(file) t = 0 tmp = url while t &lt; numPicture: try: url = tmp + str(t) result = requests.get(url, timeout=10) print(url) except error.HTTPError as e: print('网络错误，请调整网络后重试') t = t + 60 else: dowmloadPicture(result.text, word) t = t + 60 print('当前搜索结束，感谢使用') print('猜你喜欢') for re in Recommend: print(re, end=' ') 执行结果如下，比如搜索杨树： 存到本地的效果如下图： 共勉，(๑•̀ㅂ•́)و✧加油]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取心灵毒鸡汤、你好污啊 网站数据并存入本地txt文件]]></title>
    <url>%2F2019%2F07%2Fpython%2Fspider%2F%E6%9C%89%E6%AF%92%E6%AE%B5%E5%AD%90%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[心灵毒鸡汤 网站如下：https://www.nihaowua.com/home.html 代码如下： 12345678910111213141516171819202122232425262728293031323334353637import requestsimport randomfrom lxml import etree # 安装：pip install fake_useragentfrom fake_useragent import UserAgentdef get_random_ua(): #随机UA ua = UserAgent() return ua.randomheaders = &#123; 'User-Agent': get_random_ua()&#125;url = 'https://www.nihaowua.com/home.html'def main(): #写入txt文本程序 count = 0 while True: try: with open("soup.txt", "a", encoding='utf-8') as f: res = requests.get(url=url, headers=headers, timeout=10) selector = etree.HTML(res.text) content = selector.xpath('//section/div/*/text()')[0] text = str(count) + str(content) f.write(text + '\n') count += 1 print('*****正在爬取中，这是第&#123;&#125;次爬取，内容为：&#123;&#125;'.format(count, content)) except Exception as e: print('exception:', e) continueif __name__ == '__main__': main() 执行结果如下： 存入文本中的数据如下： 毒鸡汤网站如下：http://www.nows.fun/ 12345678910111213141516171819202122232425262728293031323334353637import requestsfrom lxml import etreefrom fake_useragent import UserAgentdef get_random_ua(): # 随机UA ua = UserAgent() return ua.randomheaders = &#123; 'User-Agent': get_random_ua()&#125;url = 'http://www.nows.fun/'def main(): # 写入txt文本程序 count = 0 while True: try: with open("soup_v1.txt", "a", encoding='utf-8') as f: res = requests.get(url=url, headers=headers, timeout=10) selector = etree.HTML(res.text) content = selector.xpath('//span[@id="sentence"]/text()')[0] text = str(count) + str(content) f.write(text + '\n') count += 1 print('*****正在爬取中，这是第&#123;&#125;次爬取，内容为：&#123;&#125;'.format(count, content)) except Exception as e: print('exception:', e) continueif __name__ == '__main__': main() 你好污啊 网站如下：https://www.nihaowua.com/ 代码如下： 12345678910111213141516171819202122232425262728293031import requestsimport randomfrom lxml import etreefrom fake_useragent import UserAgentdef get_random_ua(): #随机UA ua = UserAgent() return ua.randomheaders = &#123; 'User-Agent': get_random_ua()&#125;url = 'https://www.nihaowua.com/'def main(): # 写入txt文本程序 count = 0 while True: res = requests.get(url=url, headers=headers, timeout=10) selector = etree.HTML(res.text) content = selector.xpath('//section/div/*/text()')[0] with open("NiHaoWu.txt", "a") as f: text = str(count) + ' ' + content f.write(text + '\n') count += 1 print('这是第&#123;&#125;次爬取,内容为：&#123;&#125;'.format(count, content))if __name__ == '__main__': main() 执行结果如下图： 存入文本数据如下： 放到阿里云机子上跑的爬虫代码加了去重，钉钉报警 db.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- encoding: utf-8 -*-import hashlibimport timefrom sqlalchemy import create_enginefrom sqlalchemy import Column, VARCHAR, Integer, TIMESTAMP, CHARfrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_baseengine = create_engine('mysql+pymysql://root:123456@localhost/test?charset=utf8')DBSession = sessionmaker(bind=engine)session = DBSession()Base = declarative_base()class YoududuanziItem(Base): """段子信息""" __tablename__ = 'duanzi_for_fun' desc = '段子信息' id = Column(Integer, primary_key=True, autoincrement=True) duplicate_hash = Column(CHAR(40), index=True, unique=True, doc=&#123;'zh': "url hash"&#125;) crawl_time = Column(TIMESTAMP, doc=&#123;'zh': '当前时间'&#125;) centence = Column(VARCHAR(200), index=True, doc=&#123;'zh': '段子'&#125;) @classmethod def creat_table(cls): """创建数据表""" cls.__table__.create(bind=engine, checkfirst=True) def insert(self, centence): url_sha = self.get_contern_url_hash(centence) crawled_time = time.strftime('%Y-%m-%d %H:%M:%S') try: is_exist = session.query(YoududuanziItem).filter(YoududuanziItem.duplicate_hash == url_sha).all() if not is_exist: item = YoududuanziItem(duplicate_hash=url_sha, crawl_time=crawled_time, centence=centence) session.add(item) session.commit() return True else: return False except BaseException as e: session.rollback() session.close() raise BaseException(f"数据插入失败: \n&#123;url_sha&#125; \n&#123;centence&#125; \n&#123;e&#125;") def get_contern_url_hash(self, content_url): hash = hashlib.sha1() hash.update(str(content_url).encode('utf-8')) url_sha = hash.hexdigest() return url_sha 爬虫代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# -*- encoding: utf-8 -*-import timeimport jsonimport requestsimport loggingfrom lxml import etreefrom fake_useragent import UserAgentfrom my_test.db import session, YoududuanziItemclass YoududuanziSpider(object): def __init__(self): self.headers = &#123; 'User-Agent': self.get_random_ua() &#125; self.url = 'http://www.nows.fun/' # 钉钉报警模板字段，注意: 必须使用raw string, 不能使用多行字符串, 钉钉只处理没有转义的字符, 包含转义字符会导致解析失败 self.failure_template = ('数据爬取信息：\n\n' '&gt; spider_name: &#123;spider_name&#125;\n\n' '&gt; table_name: &#123;table_name&#125;\n\n' '&gt; data_num: &#123;data_num&#125;\n\n' '&gt; last_data: &#123;last_data&#125;\n\n' '&gt; log_url: &#123;log_url&#125;\n\n') self.dingding_headers = &#123; "Content-Type": "application/json;charset=utf-8", &#125; def get_random_ua(self): # 随机UA ua = UserAgent() return ua.random def get_content(self): response = requests.get(url=self.url, headers=self.headers, timeout=10) selector = etree.HTML(response.text) centence = selector.xpath('//span[@id="sentence"]/text()')[0] return centence def send_dingtalk(self, spider_name, table_name, data_num, last_data, log_url): try: content = self.failure_template.format( spider_name=spider_name, table_name=table_name, data_num=data_num, last_data=last_data, log_url=log_url ) msg = &#123; "msgtype": "markdown", "markdown": &#123; "title": '爬取的段子信息', "text": '淘数爬虫：' + content &#125; &#125; ding_url = 'https://oapi.dingtalk.com/robot/send?access_token=c1984aefbaff584bceb37b855b8380d7c6c78545fb749d068fc378df627fa786' resp = requests.post(url=ding_url, headers=self.dingding_headers, data=json.dumps(msg), timeout=30) json_data = json.loads(resp.text) if resp.status_code == 200 and json_data['errcode'] == 0: pass else: logging.error('钉钉报警发送失败&#123;&#125;'.format(json_data['errmsg'])) except Exception as e: logging.error("send dingtalk failed, exception: ", e) def run(self): for i in range(100000): job_info = self.get_content() table.insert(job_info) time.sleep(2) if i % 1000 == 0: logging.info(f'爬取进度：self.num=&#123;i&#125;条数据！！！') self.send_dingtalk(spider_name='youduduanzi', table_name='duanzi_for_fun', data_num=5, last_data=job_info, log_url=self.url)if __name__ == '__main__': duanzi = YoududuanziSpider() table = YoududuanziItem() table.creat_table() duanzi.run() 共勉，(๑•̀ㅂ•́)و✧加油]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[36计]]></title>
    <url>%2F2018%2F06%2Fdaily_life%2F36ji%2F</url>
    <content type="text"><![CDATA[《三十六计》或称三十六策，是指中国古代三十六个兵法策略，语源于南北朝，成书于明清。它是根据中国古代军事思想和丰富的斗争经验总结而成的兵书，是中华民族悠久非物质文化遗产之一。 原书按计名排列，共分六套，即胜战计、敌战计、攻战计、混战计、并战计、败战计。前三套是处于优势所用之计，后三套是处于劣势所用之计。 第一套 胜战计处于绝对优势地位之计谋。君御臣、大国御小国之术也。亢龙有悔。 第一计 瞒天过海本指光天化日之下不让天知道就过了大海。形容极大的欺骗和谎言，什么样的欺骗手段都使得出来。【原典】备周则意怠①；常见则不疑。阴在阳之内，不在阳之对②。太阳，太阴③。【注释】兵法：三十六计①备周则意怠：防备十分周密，往往容易让人斗志松懈，削弱战力。②阴在阳之内，不在阳之对：阴阳是我国古代传统哲学和文化思想的基点，其思想笼罩着大千宇宙、细末尘埃，并影响到意识形态的一切领域。阴阳学说是把宇宙万物作为对立的统一体来看待，表现出朴素的辩证思想。阴、阳二字早在甲骨文、金文中出现过，但作为阴气、阳气的阴阳学说，最早是由道家始祖楚国人老子所倡导，并非《易经》提出。此计中所讲的阴指机密、隐蔽；阳，指公开、暴露。阴在阳之内，不在阳之对，在兵法上是说秘计往往隐藏于公开的事物里，而不在公开事物的对立面上。③太阳，太阴：太，极，极大。此句指非常公开的事物里往往蕴藏着非常机密的计谋。【释义】防备得周全时，更容易麻痹大意；习以为常的事，也常会失去警戒。秘密常潜藏在公开的事物里，并非存在于公开暴露的事物之外。公开暴露的事物发展到极端，就形成了最隐秘的潜藏状态。【浅解】所谓瞒天过海，就是故意一而再、再而三地用伪装的手段迷惑、欺骗对方，使对方放松戒备，然后突然行动，从而达到取胜的目的。【按语】阴谋作为，不能于背时秘处行之。夜半行窃，僻巷杀人，愚俗之行，非谋士之所为也。如：开皇九年，大举伐陈。先是弼请缘江防人，每交代之际，必集历阳，大列旗帜，营幕蔽野。陈人以为大兵至，悉发国中士马，既而知防人交代。其众复散，后以为常，不复设备，及若弼以大军济江，陈人弗之觉也。因袭南徐州，拔之。【解析】“瞒天过海”之谋略决不可以与“欺上瞒下”、“掩耳盗铃”或者诸如夜中行窃、拖人衣裘、僻处谋命之类等同，也决不是谋略之士所应当做的事情。虽然，这两种在某种程度上都含有欺骗性在内，但其动机、性质、目的是不相同的，自是不可以混为一谈。这一计的兵法运用，常常是着眼于人们在观察处理世事中，由于对某些事情的习见不疑而自觉不自觉地产生了疏漏和松懈，故能乘虚而示假隐真，掩盖某种军事行动，把握时机，出奇制胜。【探源】见《永乐大典·薛仁贵征辽事略》。唐太宗贞观十七年，御驾亲征，领三十万大军以宁东土。一日，浩荡大军东进来到大海边上，帝见眼前只是白浪排空，海茫无穷，即向众总管问及 过海之计，四下面面相觑。忽传一个近居海上的豪民请求见驾，并称三十万过海军粮此家业已独备。帝大喜，便率百官随这豪 民来到海边。只见万户皆用一彩幕遮围，十分严密。豪民老人东向倒步引帝入室。室内更是绣幔彩锦，茵褥铺地。百官进酒， 宴饮甚乐。不久，风声四起，波响如雷，杯盏倾侧，人身摇动，良久不止。太宗警惊，忙令近臣揭开彩幕察看，不看则已，一 看愕然。满目皆一片清清海水横无际涯，哪里是什么在豪民家作客，大军竟然已航行在大海之上了！原来这豪民是新招壮士薛仁贵扮成，这“瞒天过海”计策就是他策划的。 “瞒天过海”用在兵法上，实属一种示假隐真的疑兵之计， 用来作战役伪装，以期达到出其不意的战斗成果。【故事】公元589年，隋朝将大举攻打陈国。这陈国乃是公元557年陈霸先称帝建国，定国号为陈，建都城于建康，也就是今天的南京。战前，隋朝将领贺若弼因奉命统领江防，经常组织沿江守备部队调防。每次调防都命令部队于历阳（也就是今天安徽省和县一带地方）集中。还特令三军集中时，必须大列旗帜，遍支警帐，张扬声势，以迷惑陈国。果真陈国难辨虚实，起初以为大军将至，尽发国中士卒兵马，准备迎敌面战。可是不久，又发现是隋军守备人马调防，并非出击，陈便撤回集结的迎战部队。如此五次三番，隋军调防频繁，蛛丝马迹一点不露，陈国竟然也司空见惯，戒备松懈。直到隋将贺若弼大军渡江而来，陈国居然未有觉察。隋军如同天兵压顶，令陈兵猝不及防，遂一举拔取陈国的南徐州（今天的江苏省镇江市一带）。 第二计 围魏救赵本指围攻魏国的都城以解救赵国。现借指用包超敌人的后方来迫使它撤兵的战术。【原典】共敌不如分敌①，敌阳不如敌阴②。【注释】①共敌不如分敌：共，集中的。分，分散，使分散。句意：攻打集中的敌人，不如设法分散它而后再打。②敌阳不如敌阴：敌，动词，攻打。句意为 先打击气势旺盛的敌人，不如后打击气势旺盛的敌人。【释义】进攻兵力集中、实力强大的敌军，不如使强大的敌军分散减弱了再攻击。攻击敌军的强盛部位，不如攻击敌军的薄弱部份来得有效。【浅解】所谓围魏救赵，是指当敌人实力强大时，要避免和强敌正面决战，应该采取迂回战术，迫使敌人分散兵力，然后抓住敌人的薄弱环节发动攻击，致敌于死地。【按语】治兵如治水：锐者避其锋，如导疏；弱者塞其虚，如筑堰。故当齐救赵 时，孙膑谓田忌曰：“夫解杂乱纠纷者不控拳，救斗者，不搏击，批亢捣虚，形格势禁，则自为解耳。”【解析】对敌作战，好比治水：敌人势头强大， 就要躲过冲击，如用疏导之法分流。对弱小的敌人，就抓住时机消灭它，就象筑堤围堰，不让水流走。所以当齐救赵时，孙子对田忌说：“想理顺乱丝和结绳，只能用手指慢慢去解开，不能握紧拳头去捶打；排解搏斗纠纷，只能动口劝说，不能动手参加。对敌人，应避实就虚，攻其要害，使敌方受到挫折，受到牵制，围困可以自解。”【故事】公元前354年，赵国进攻卫国，迫使卫国屈服于它。卫国原来是入朝魏国的，后来改向亲附赵国，魏惠王不由十分恼火，于是决定派庞涓讨伐赵国。不到一年时间，庞涓便攻到了赵国的国都邯郸。邯郸危在旦夕。赵国国君赵成侯一面竭力固守，一面派人火速奔往齐国求救（此时，赵国与齐国结盟）。齐威王任命田忌为主将，以孙膑为军师，率军救赵。孙膑出计，要军中最不会打仗的齐城、高唐佯攻魏国的军事要地——襄陵，以麻痹魏军。而大军却绕道直插大梁。庞涓得到魏惠王的命令只得火速返国救援。魏军为疲惫之师，怎能打过齐国以逸待劳的精锐之师。所以大败。 第三计 借刀杀人比喻自己不出面，假借别人的手去害人。【原典】敌已明，友未定①，引友杀敌，不自出力，以《损》②推演。【注释】①友未定：“友”指军事上的盟者，也即除敌、我两方之外的第三者中，可以一时结盟而借力的人、集团或国家。友未定，就是说盟友对主战的双方，尚持徘徊、观望的态度，其主意不明不定的情况。②《损》：出自《易经·损》卦：“损：有孚，元吉，无咎，可贞，利有攸往。”孚，信用。元，大。贞，正。意即，取抑省之道去行事，只要有诚心，就会有大的吉利，没有错失，合于正道，这样行事就可一切如意。又有《象》损卦：“损：损下益上，其道上行。”意指“损”与“益”的转化关系，借用盟友的力量去打击敌人，势必要使盟友受到损失，但盟友的损失正可以换得自己的利益。【释义】敌人的情况已经明了，友方的态度尚未确定。利用友方的力量去消灭敌人，自己不需要付出什么力量。这是从《损》卦推演出的计策。【浅解】所谓借刀杀人，是指在对付敌人的时候，自己不动手，而利用第三者的力量去攻击敌人，用以保存自己的实力；再进一步，则巧妙地利用敌人的内部矛盾，使其自相残杀，以达到致敌于死地的目的。【按语】敌象已露，而另一势力更张，将有所为，便应借此力以毁敌人。如：郑桓公将欲袭郐，先向郐之豪杰、良臣、辨智、果敢之士，尽书姓名，择郐之良田赂之，为官爵之名而书之，因为设坛场郭门之处而埋之，衅之以鸡缎，若盟状。郐君以为内难也，而尽杀其良臣。桓公袭郐，遂取之。诸葛亮之和吴拒魏，及关羽围樊、裹，曹欲徙都，懿及蒋济说曹曰：“刘备、孙权外亲内疏，关羽得志，权心不愿也。可遣人蹑其后，许割江南以封权，则樊围自释。”曹从之，羽遂见擒。【故事】刘秀借刀杀李铁。 第四计 以逸待劳指作战时不首先出击，养精蓄锐，以对付从远道来的疲劳的敌人。【原典】《三十六计通解与运用》《三十六计通解与运用》困敌之势①，不以战；损刚益柔②。【注释】①困敌之势：迫使敌人处于围顿的境地。②损刚益柔：语出《易经·损》。“刚”、“柔”是两个相对的事物现象，在一定的条件下相对的两方有可相互转化。“损”，卦名。本卦为异卦相叠（兑下艮上）。上卦为艮，艮为山，下卦为兑，兑为泽。上山下泽，意为大泽浸蚀山根之象，也就说有水浸润着山，抑损着山，故卦名叫损”。“损刚益柔”是根据此卦象讲述“刚柔相推，而主变化”的普遍道理和法则。 此计正是根据“损”卦的道理，以“刚”喻敌，以“柔”喻已，意谓困敌可用积极防御，逐渐消耗敌人的有生力量，使之由强变弱，而我因势利导又可使自己变被动为主动，不一定要用直接进攻的方法，同样可以制胜。【按语】此即致敌之法也。兵书云：“凡先处战地而待敌者逸，后处战地而趋战者劳。故善战者，致人而不致于人。”兵书论敌，此为论势，则其旨非择地以待敌；而在以简驭繁，以不变应变，以小变应大变，以不动应动以小动应大动，以枢应环也。如：管仲寓军令于内政，实而备之；孙膑于马陵道伏击庞涓；李牧守雁门，久而不战，而实备之，战而大破匈奴。【故事】三国时，吴国杀了关羽，刘备怒不可遏，亲自率领七十万大军伐吴。蜀军从长江上游顺流进击，居高临下，势如破竹。举兵东下，连胜十余阵，锐气正盛，直至彝陵，哮亭一带，深入吴国腹地五六百里。孙权命青年将领陆逊为大都督，率五万人迎战。陆逊深谙兵法，正确地分析了形势，认为刘备锐气始盛，并且居高临下，吴军难以进攻。于是决定实行战略退却，以观其变。吴军完全撤出山地，这样，蜀军在五六百里的山地一带难以展开，反而处于被动地位，欲战不能，兵疲意阻。相持半年，蜀军斗志松懈。陆逊看到蜀军战线绵延数百里，首尾难顾，在山林安营扎寨，犯了兵家之忌。时机成熟，陆逊下令全面反攻，打得蜀军措手不及。陆逊—把火，烧毁蜀军七百里连营，蜀军大乱，伤亡惨重，慌忙撤退。陆逊创造了战争史上以少胜多、后发制人的著名战例。 第五计 趁火打劫本指趁人家失火的时候去抢东西。现比喻乘人之危，捞一把。【原典】敌之害大①，就势取利，刚决柔也②。【注释】①敌之害大：害，指敌人所遭遇到的困难，危厄的处境。②刚决柔也：语出《易经·夬》卦。 夬，卦名。本卦为异卦相叠（乾下兑上）。上卦为兑，兑为泽；下卦为乾，乾为天。兑上乾下，意为有洪水涨上天之象。《夬夬》的《彖》辞说：“央，决也。刚决柔也。”决，冲决、冲开、去掉的意思。因乾卦为六十四卦的第一卦，乾为天，是大吉大利，吉利的贞卜，所以此卦的本义是力争上游，刚健不屈。所谓刚决柔，就是下乾这个阳刚之卦，在冲决上兑这个阴柔的卦。此计是以“刚”喻己，以“柔”喻敌，言乘敌之危，就势而取胜的意思。【按语】敌害在内，则劫其地；敌害在外，则劫其民；内外交害，败劫其国。如：越王乘吴国内蟹稻不遗种而谋攻之，后卒乘吴北会诸侯于黄池之际，国内空虚，因而捣之，大获全胜。【故事】多尔衮趁乱入关。 第六计 声东击西指表面上声言要攻打东面，其实是攻打西面。军事上使敌人产生错觉的一种战术。【原典】敌志乱萃①，不虞②，坤下兑上 ③之象，利其不自主而取之。【注释】①敌志乱萃：援引《易经．萃》卦中《象》辞：“乃乱乃萃，其志乱也”之意。萃，悴，即憔悴。是说敌人情志混乱而且憔悴。②不虞：未意科，未预料。③坤下兑上：萃卦为异卦相叠（坤下兑上）。上卦为兑，兑为泽；下并为坤，坤为地。有泽水淹及大地，洪水横流之象。此计是运用“坤下兑上”之卦象的象理，喻“敌志乱萃”而造成了错失丛杂、危机四伏的处境，我则要抓住敌人这不能自控的混乱之势，机动灵活地运用时东时西，似打似离，不攻而示它以攻，欲攻而又示之以不攻等战术，进一步造成敌人的错觉，出其不意地一举夺胜。【按语】西汉，七国反，周亚夫坚壁不战。吴兵奔壁之东南陬，亚夫便备西北；已而吴王精兵果攻西北，遂不得入。此敌志不乱，能自去也。汉末，朱隽围黄巾于宛，张围结垒，起土山以临城内，鸣鼓攻其西南，黄巾悉众赴之，隽自将精兵五千，掩其东北，遂乘虚而入。此敌志乱萃，不虞也。然则声东击西之策，须视敌志乱否为定。乱，则胜；不乱，将自取败亡，险策也。【故事】韩信木罂渡黄河。 第二套 敌战计处于势均力敌态势之计谋。或跃于渊。 第七计 无中生有本指本来没有却硬说有。现形容凭空捏造。【原典】诳也，非诳也，实其所诳也①。少阴、太阴、太阳②。【注释】①诳也，非诳也，实其所诳也：诳，欺诈、诳骗。实，实在，真实，此处作意动词。句意为：运用假象欺骗对方，但并非一假到底，而是让对方把受骗的假象当成 真象。②少阴，太阴，太阳：此“阴”指假象，“阳”指真象。 句意为：用大大小小的假象去掩护真象。【按语】无而示有，诳也。诳不可久而易觉，故无不可以终无。无中生有，则由诳而真，由虚而实矣，无不可以败敌，生有则败敌矣，如：令狐潮围雍丘，张巡缚嵩为人千余，披黑夜，夜缒城下；潮兵争射之，得箭数十万。其后复夜缒人，潮兵笑，不设备，乃以死士五百砍潮营，焚垒幕，追奔十余里。【故事】张仪诓楚助强秦。 第八计 暗度陈仓指正面迷惑敌人，而从侧翼进行突然袭击。比喻暗中进行活动。 后多比喻暗中进行某种活动（多指男女私通）。【原典】示之以动①，利其静而有主，“益动而巽②”。【注释】①示之以动：示，给人看。动，此指军事上的正面佯攻、佯动等迷惑敌方的军事行动。②益动而巽：语出《易经．益》卦。益，卦名。此卦为异卦相叠（震下巽上）。上卦为巽，巽为风；下卦为震，震为雷。意即风雷激荡，其势愈增，故卦名为益。与损卦之义，互相对立，构成一个统一的组纷。《益卦》的《彖》辞说：“益动而巽，日进无疆。”这是说益卦下震为雷为动，上巽为风为顺，那么，动而合理，是天生地长，好处无穷。此计是利用敌人被我“示之以动”的迷惑手段所蒙蔽，而我即乘虚而入，以达军事上的出奇制胜。【按语】奇出于正，无正不能出奇。不明修栈道，则不能暗渡陈仓。昔邓艾屯白水之北；姜维遥廖化屯白水之南，而结营焉。艾谓诸将日：“维令卒还，吾军少，法当来渡，而不作桥，此维使化持我．令不得还。必自东袭取洮城矣。”艾即夜潜军，径到洮城。维果来渡。而艾先至，据城，得以不破。此则是姜维不善用暗渡陈仓之计；而邓艾察知其声东击西之谋也。【故事】韩信奇兵取三秦。 第九计 隔岸观火隔着河看对岸的火。比喻对别人的危难不予援救而在一旁看热闹。【原典】阳乖序乱①，阴以待逆②。暴戾恣睢③，其势自毙。顺以动豫，豫顺以动④。【注释】①阳乖序乱：阳，指公开的。乖，违背，不协调。此指敌方内部矛盾激化，以致公开地表现出多方面秩序混乱、倾轧。②阴以待逆：阴，暗下的。逆，叛逆。此指暗中静观敌变，坐待敌方更进一步的局面恶化。③暴戾恣睢：戾，凶暴，猛烈。睢，任意胡为。④顺以动豫，豫顺以动：语出《易经．豫》卦。豫，卦名。本卦为异卦相叠（坤下震上）。本卦的下卦为坤为地，上卦为震为雷。是雷生于地，雷从地底而出，突破地面，在空中自在飞腾。《豫卦》的《彖》辞说“豫，刚应而志行，顺以动。”意即豫卦的意思是顺时而动，正因为豫卦之意是顺时而动，所以天地就能随和其意，做事就顺当自然。此计正是运用本卦顺时以动的哲理，说坐观敌人的内部恶变，我不急于采取攻逼手段，顺其变，“坐山观虎斗”，最后让敌人自残自杀，时机—到而我即坐收其利，一举成功。【按语】乖气浮张，逼则受击，退则远之，则乱自起。昔袁尚、袁熙奔辽东，众尚有数千骑。初，辽东太守公孙康，恃远不服。及曹操破乌丸，或说曹遂征之，尚兄弟可擒也。操曰：“吾方使斩送尚、熙首来，不烦兵矣。”九月，操引兵自柳城还，康即斩尚、熙，传其首。诸将问其故，操日：“彼素畏尚等，吾急之，则并力；缓之，则相图，其势然也。”或曰：此兵书火攻之道也，按兵书《火攻篇》前段言火攻之法，后段言慎动之理，与隔岸观火之意，亦相吻合。【故事】郭嘉定计灭袁氏。 第十计 笑里藏刀比喻外表和气而内心阴险。【原典】信而安之①，阴以图之②，备而后动， 勿使有变。刚中柔外也③。【注释】①信而安之：信，使信。安，使安，安然，此指不生 疑心。②阴以图之：阴，暗地里。③刚中柔外：表面柔顺，实质强硬尖利。【按语】兵书云：“辞卑而益备者，进也；……无约而请和者，谋也。”故凡敌人之巧言令色，皆杀机之外露也。宋曹玮知渭州，号令明肃，西夏人惮之。一日玮方对客弈棋，会有叛夸数千，亡奔夏境。堠骑（骑马的侦宿员）报至，诸将相顾失色，公言笑如平时。徐谓骑日．“吾命也，汝勿显言。”西夏人闻之，以为袭己，尽杀之。此临机应变之用也。若勾践之事夫差．则意使其久而安之矣。【故事】隋文帝智灭南陈。 第十一计李代桃僵原指桃、李共患难。比喻兄弟相爱相助。后用来指互相顶替或代人受过。【原典】势必有损，损阴以益阳①。【注释】①损阴以益阳：阴：此指某些细微的、局部的事物。阳，此指事物带整体意义的、全局性的事物。这是说在军事谋略上，如果暂时要以某种损失、失利为代价才能最终取胜，指挥者应当机立断，作出某些局部、或暂时的牺牲，去保全或者争取全局的、整体性的胜利。这是运用我国古代阴阳学说的阴阳相生相克、相互转化的道理而制定的军事谋略。【按语】我敌之情，各有长短。战争之事，难得全胜，而胜负之诀，即在长短之相较，乃有以短胜长之秘诀。如以下驷敌上驷，以上驷敌中驷，以中驷敌下驷之类：则诚兵家独具之诡谋，非常理之可测也。【故事】三叉用计保孤儿。 第十二计 顺手牵羊顺手就牵了羊。比喻不费劲，乘机便得到的。现多指乘机拿走人家东西的偷窃行为。【原典】微隙在所必乘①；微利在所必得。少阴，少阳②。【注释】①微隙在所必乘：微隙，微小的空隙，指敌方的某些漏洞、疏忽。②少阴，少阳：少阴，此指敌方小的疏漏，少阳，指我方小的得利。此句意为我方要善于捕捉时机，伺隙捣虚，变敌方小的疏漏而为我方小的得利。【按语】大军动处，其隙甚多，乘间取利，不必以胜。胜固可用，败亦可用。【故事】追废帝郑和下西洋。第三套 攻战计处于进攻态势之计谋。飞龙在天。 第十三计 打草惊蛇打动草惊动了藏在草里的蛇。后用以指做事不周密，行动不谨慎，而使对方有所觉察。【原典】疑以叩实①，察而后动； 复者，阴之媒也②。【注释】①疑以叩实：叩，问，查究。意为发现了疑点就应 当考实查究清楚。②复者，阴之媒也：复者，反复去做，即反复去叩实而后动。阴，此指某些隐藏着的、暂时尚不明显或未暴露的事物、情况。媒，媒介。句意为反复叩实查究，而后采取相应的行动，实际是发现隐藏之敌的重要手段。【按语】敌力不露，阴谋深沉，未可轻进，应遍探其锋。兵书云：“军旁有险阻、潢井、葭苇、山林、翳荟者，必谨复索之，此伏奸所藏也。”【故事】魏军兵败木门道。 第十四计 借尸还魂迷信人认为人死后灵魂可附着于别人的尸体而复活。后用以比喻已经消灭或没落的事物，又假托别的名义或以另一种形式重新出现。【原典】有用者，不可借①；不能用者，求借②。借不能用者而用之，匪我求童蒙，童蒙求我③。【注释】①有用者，不可借；意为世间许多看上去很有用处的东西，往往不容易去驾驭而为己用。②不能用者，求借：此句意与①句相对言之。即有些看上去无什用途的东西，往往有时我还可以借助它而为己发挥作用。犹如我欲“还魂”还必得借助看似无用的“尸体”的道理。此言兵法，是说兵家要善于抓住一切机会，甚至是看去无什用处的东西，努力争取主动，壮大自己，即时利用而转不利为有利，乃至转败为胜。③匪我求童蒙，童蒙求我：语出《易经．蒙》卦。蒙，卦名。本纷是异卦相叠（下坎上艮）。本卦上卦为艮为山，下卦为坎为水为险。山下有险，草木丛生，故说“蒙”。这是蒙卦卦象。这里“童蒙”是指幼稚无知、求师教诲的儿童。此句意为不是我求助于愚昧之人，而是愚昧之人有求于我了。【按语】换代之际，纷立亡国之后者，固借尸还境之意也。凡—切寄兵权于人，而代其攻宁者，皆此用也。【故事】立张楚陈胜为王。 第十五计 调虎离山设法使老虎离开山头。比喻为了便于行事，想法子引诱人离开原来的地方。【原典】待天以困之①，用人以诱之②，往蹇来连返③。【注释】①待天以困之：天，指自然的各种条件或情况。此句意为战场上我方等待天然的条件或情况对敌方不利时，我再去围困他。②用人以诱之：用人为的假象去诱惑他（指敌人），使他向我就范。③往蹇来返：语出《易经．蹇》卦。蹇，卦名。本卦为异卦相叠（艮下坎上）。上卦为坎为水，下卦为艮为山。山上有水流，山石多险，水流曲折，言行道之不容易，这是本卦的卦象。蹇，困难；返，广大美好貌。这句意为：去时艰难，来时美好。此计运用这个道理，是说战场上若遇强敌，要善用谋，用假象使敌人离开驻地，诱他就我之范，丧失他的优势，使他处处皆难，寸步难行，由主动变被动，而我则出其不意而致胜。【按语】兵书曰：“下政攻城”。若攻坚，则自取败亡矣。敌既得地利，则不可争其地。且敌有主而势大：有主，则非利不来趋；势大，则非天人合用，不能胜。汉末，羌率众数千，遮虞诩于队仓崤谷。诩即停军不进，而宣言上书请兵，须到乃发。羌闻之，乃分抄旁县。翔因其兵散，日夜进道，兼行百余里，令军士各作两灶，日倍增之，羌不敢逼，遂大破之。兵到乃发者，利诱之也；日夜兼进者，用天时以困之也；倍增其灶者，惑之以人事也。【故事】石碏设计除暴君。 第十六计 欲擒故纵石刻：欲擒故纵石刻：欲擒故纵要捉住他，故意先放开他。比喻为了进一步的控制，先故意放松一步。【原典】逼则反兵；走则减势①。紧随勿迫。累其气力，消其斗志，散而后擒，兵不血刃②。需，有孚，光③。【注释】①逼则反兵，走则减势：走，跑。逼迫敌人太紧，他可能因此拼死反扑，若让他逃跑则可减削他的气势。②兵不血刃：血刃，血染刀刃。此句意为兵器上不 沾血。②需，有孚，光：语出《易经．需卦》。需，卦名。本卦为异卦相叠（乾下坎上）。需的下卦为乾为天，上卦为坎为水，是降雨在即之象。也象征着一种危险存在着（因为“坎”有险义），必得去突破它，但突破危险又要善于等待。“需”，等待。《易经，需》卦卦辞：“需，有孚，光”。孚，诚心。光，通广。句意为：要善于等待，要有诚心（包含耐性），就会有大吉大利。【按语】所谓纵着，非放之也，随之，而稍松之耳。“穷寇勿追”，亦即此意，盖不追者，非不随也，不追之而已。武侯之七纵七擒，即纵而随之，故蹑展转推进，至于不毛之地。武侯之七纵，其意在拓地，在借孟获以服诸蛮，非兵法也。故论战，则擒者不可复纵。【故事】诸葛亮七擒孟获。 第十七计 抛砖引玉以自己的粗浅的意见引出别人高明的见解。【原典】类以诱之①，击蒙也②。【注释】①类以诱之：出示某种类似的东西并去诱惑他。②击蒙也：语出《易经．蒙》如。参前“借尸还魂”计注释④。击，撞击，打击。句意为：诱惑敌人，便可打击这种受我诱惑的愚蒙之人了。【按语】诱敌之法甚多，最妙之法，不在疑似之间，而在类同，以固其惑。以旌旗金鼓诱敌者，疑似也；以老弱粮草诱敌者，则类同也。如：楚伐绞，军其南门，屈瑕曰：“绞小而轻，轻则寡谋，请勿捍采樵者以诱之。”从之，绞人获利。明日绞人争出，驱楚役徙于山中。楚人坐守其北门，而伏诸山下，大败之，为城下之盟而还。又如孙膑减灶而诱杀庞涓。【故事】萧翼智赚《兰亭序》帖。 第十八计擒贼擒王作战要先擒拿主要敌手。比喻做事要抓关键。【原典】摧其坚，夺其魁，以解其体。龙战于野，其道穷也①。【注释】①龙战于野，其道穷也：语出《易经．坤》卦。坤，卦名。本卦是同卦相叠（坤下坤上），为纯阴之卦。引本卦上六，《象辞》：“龙战于野，其道穷也。”是说即使强龙争斗在田野大地之上，也是走入了困顿的绝境。比喻战斗中擒贼擒王谋略的威力。【按语】攻胜则利不胜取。取小遗大，卒之利、将之累、帅之害、攻之亏也。舍胜而不摧坚擒王．是纵虎归山也。擒王之法，不可图辨旌旗，而当察其阵中之首动。昔张巡与尹子奇战，直冲敌营，至子奇麾下，营中大乱，斩贼将五十余人，杀士卒五千余人。迎欲射子奇而不识，剡蒿为矢，中者喜谓巡矢尽，走白子奇，乃得其状，使霁云射之，中其左目，几获之，子奇乃收军退还。【故事】西门豹治邺。 第四套 混战计处于不分敌友、军阀混战态势之计谋。见龙在野。 第十九计 釜底抽薪从锅底抽掉柴火。比喻从根本上解决问题。【原典】不敌其力①，而消其势②，兑下乾上之象③。【注释】①不敌其力：敌，动词，攻打。力，最坚强的部位。②而消其势：势，气势。③兑下乾上之象：《易经》六十四卦中，《履》卦为 “兑下乾上”，上卦为乾为天．下卦为兑为泽。又，兑为阴卦，为柔；乾为阳卦，为刚。兑在下，从循环关系和规律上说，下必冲上，于是出现“柔克刚”之象。此计正是 运用此象推理衍之，喻我取此计可胜强敌。【按语】水沸者，力也，火之力也，阳中之阳也，锐不可当；薪者，火之魄也，即力之势也，阴中之阴也，近而无害；故力不可当而势犹可消。尉缭子曰：“气实则斗，气夺则走。”面夺气之法，则在攻心，昔吴汉为大司马，有寇夜攻汉营，军中惊扰，汉坚卧不动，军中闻汉不动，有倾乃定。乃选精兵反击，大破之：此即不直当其力而扑消其势也。宋薛长儒为汉、湖、滑三州通判，驻汉州。州兵数百叛，开营门，谋杀知州、兵马监押，烧营以为乱。有来告者，知州、监押皆不敢出。长儒挺身徒步，自坏垣入其营中，以福祸语乱卒日：“汝辈皆有父母妻子，何故作此？叛者立于左，胁从者立于右！”于是，不与谋者数百人立于右；独主谋者十三人突门而出，散于诸村野，寻捕获。时谓非长儒，则一城涂炭矣！此即攻心夺气之用也。或日：敌与敌对，捣强敌之虚以败其将成之功也。【故事】曹操奇兵袭乌巢。 第二十计 混水摸鱼比喻趁混乱时机攫取不正当的利益。也作“浑水摸鱼”。【原典】乘其阴乱①，利其弱而无主。随，以向晦入宴息②。【注释】①乘其阴乱：阴，内部。意为乘敌人内部发生混乱。②随，以向晦入宴息：语出《易经．随》卦。随，卦名。本卦为异卦相叠（震下兑上）。本卦上卦为兑为泽；下卦为震为雷。言雷入泽中，大地寒凝，万物蛰伏，故如象名“随”。随，顺从之意。《随卦》的《象》辞说：“泽中有雷，随，君子以向晦入宴息。”意为人要随应天时去作息，向晚就当入室休息。此计运用此象理，是说打仗时要得于抓住敌方的可乘之隙，而我借机行事，使乱顺我之意，我便乱中取利。【按语】动荡之际，数力冲撞，弱者依违无主，散蔽而不察，我随而取之。《六韬》日：“三军数惊，士卒不齐，相恐以敌强，相语以不利，耳目相属，妖言不止，众口相惑，不畏法令，不重其将：此弱征也。”是鱼，混战之际，择此而取之。如：刘备之得荆州，取西川，皆此计也。【故事】搅乱局淝水败苻坚。 第二十一计 金蝉脱壳蝉变为成虫时要脱去幼早的壳。比喻用计脱身。【原典】存其形，完其势①；友不疑，敌不动。巽而止蛊②。【注释】①存其形，完其势，保存阵地已有的战斗形貌，进一步完备继续战斗的各种态势。②巽而止蛊：语出《易经·蛊》卦。蛊，卦名。本卦为异卦相叠（巽下艮上）。本卦上卦为艮为山为刚，为阳卦；巽为风为柔，为阴势。故“蛊”的卦象是“刚上柔下”，意即高山沉静，风行于山下，事可顺当。又，艮在上卦，为静；巽为下卦，为谦逊，故说“谦虚沉静”，“弘大通泰”是天下大治之象。此计引本卦《彖》辞：“巽而止，蛊。”其意是我暗中谨慎地实行主力转移，稳住敌人，我则乘敌不惊疑之际脱离险境，就可安然躲过战乱之危。“蛊”，意为顺事。【按语】共友击敌，坐观其势。尚另有一敌，则须去而存势。则金蝉脱壳者，非徒走也，盖为分身之法也。故大军转动．而旌旗金鼓，俨然原阵，使敌不敢动，友不生疑，待己摧他敌而返，而友敌始知，或犹且不如。然则金蝉脱壳者，在对敌之际，而抽精锐以袭别阵也。如：诸葛亮卒于军，司马懿追焉，姜维令仪反旗鸣鼓，若向懿者，懿退，于是仪结营而去。檀道济被围，乃命军士悉甲，身自（白）服乘舆徐出外围，魏惧有伏，不敢逼，乃归。【故事】慈禧用计回北京。 第二十二计 关门捉贼关起门来捉进入屋内的盗贼。【原典】小敌困之①。剥，不利有攸往②。【注释】①小敌困之：对弱小或者数量较少的敌人，要设法去困围（或者说歼灭）他。②剥，不利有攸往：语出《易经．剥》卦。剥，卦名。本卦异卦相叠（坤下艮上），上卦为艮为山，下卦为坤为地。意即广阔无边的大地在吞没山，故外名日“剥”。“剥”，落的意思。卦辞：“剥，不利有彼往”意为：剥卦说，有所往则不利。此计引此卦辞，是说对小股敌人要即时围困消灭，而不利于去急追或者远袭。【按语】捉贼而必关门，非恐其逸也，恐其逸而为他人所得也；且逸者不可复追，恐其诱也。贼署，奇兵也，游兵也，所以劳我者也。吴子曰：“今使一死贼，伏于矿野，千人追之，莫不枭视狼顾。何者？恐其暴起而害己也。是以—人投命，足惧千夫。”追贼者，贼有脱逃之机，势必死斗；若断其去路，则成擒矣。故小敌必困之，不能，则放之可也。【故事】白起长平败赵括。 第二十三计 远交近攻石刻：远交近攻石刻：远交近攻结交离得远的国家而进攻邻近的国家。这是秦国用以并吞六国，统一全国的外交策略。【原典】形禁势格①，利从近取，害以远隔②。上火下泽③。【注释】①形禁势格：禁，禁止。格，阻碍。句意为受到地势的限制和阻碍。②利从近取，害以远隔：句意为，先攻取就近的敌人有利，越过近敌先去攻取远隔之敌是有害的。③上火下泽：语出《易经·睽》卦。睽，卦名。本卦为异卦相叠（兑下离上）。上卦为离为火，下卦为兑为泽。上离下泽，是水火相克，水火相克则又可相生，循环无穷。又“睽”，乘违，即矛盾。本卦《象》辞：“上火下泽，睽。”意为上火下泽，两相离违、矛盾。此计运用“上火下泽”相互离违的道理，说明采取“远交近攻”的不同做法，使敌相互矛盾、离违，而我正好各个击破。【按语】混战之局，纵横捭阖之中，各自取利。远不可攻，而可以利相结；近者交之，反使变生肘腑。范雎之谋，为地理之定则，其理甚明。【故事】定国策范雎拜相。 第二十四计 假道伐虢以借路为名，实际上要侵占该国（或该路）。虢，诸侯国名。也作“假道灭虢”。【原典】两大之间，敌胁以从，我假以势①。困，有言不信②。【注释】①两大之间，敌胁以从，我假以势：假，借。句意为：处在我与敌两个大国之中的小国，敌方若胁迫小国屈从于他时，我则要借机去援救，造成一种有利的军事态势。②困，有言不信：语出《易经·困》卦。困，卦名。本纷为异卦相叠（坎下兑上），上卦为兑为泽，为阴；下卦为坎为水，为阳。卦象表明，本该容纳于泽中的水，离开泽而向下渗透，以致泽无水而受困，水离开泽流散无归也自困，故卦名为“困”。“困”，困乏。卦辞：“困，有言不信。”意为，处在困乏境地，难道不相信这基吗？此计运用此卦理，是说处在两个大国中的小国，面临着受人胁迫的境地时，我若说援救他，他在困顿中会不相信吗？【按语】假地用兵之举，非巧言可诳，必其势不受—方之胁从，则将受双方之夹击。如此境况之际，敌必迫之以威，我则诳之以不害，利其幸存之心，速得全势，彼将不能自阵，故不战而灭之矣。如：晋侯假道于虞以伐虢，晋灭虢，虢公丑奔京师，师还，袭虞灭之。【故事】蠢虞公贪财丧国。 第五套 并战计对付友军反为敌态势之计谋。终日乾乾。 第二十五计 偷梁换柱比喻暗中玩弄手法，以假代真。【原典】频更其阵，抽其劲旅，待其自败， 而后乘之①，曳其轮也②。【注释】①句中的几个“其”字，均指盟友、盟军言之。②曳其轮也：“语出《易经，既济》纷。既济，龄名，本卦为异卦相叠（离下坎上）。上卦为坎为水，下卦为离为火。水处火上，水势压倒火势，救火之事，大告成功，故卦名“即济”。既，已经；济，成功。本卦初九?《象》辞：“曳其轮，义无咎也。”意为，拖住了车轮，车子就不能运行了。此计运用此象理，是说好比拖住了车轮，车子就不能运行了。己方抽其友方劲旅，如同抽出梁木，房屋就会坍塌，于是己方就可以控制他了。【按语】阵有纵横，天衡为梁，地轴为柱。梁柱以精兵为之，故观其阵，则知精兵之所有。共战他敌时，频更其阵，暗中抽换其精兵，或竟代其为梁柱；势成阵塌，遂兼其兵。并此敌以击他敌之首策也。【故事】狸猫换太子。 第二十六计 指桑骂槐指着桑树骂槐树。比喻借题发挥，指着这个骂那个。【原典】大凌小者，警以诱之①。刚中而应，行险而顺②。【注释】①大凌小者，警以诱之：强大者要控制弱下者，要用警戒的办法去诱导他。②刚中而应，行险而顺：语出《易经．师》卦。师卦名。本卦为异卦相叠（坎下坤上）。本卦下卦为坎为水，上卦为坤为地，水流地下，随势而行。这正如军旅之象，故名为“师”。本卦《彖》辟说：“刚中而应，行险而顺，以此毒天下，而民从之。”“刚中而应”是说九二以阳爻居于下坎的中信，叫“刚中”，又上应上坤的六五，此为此应。下卦为坎，坎表示险，上卦为坤，坤表示顺，故又有“行险而顺”之象。以此卦象的道理督治天下，百姓就会服从。这是吉祥之象。“毒”，督音，治的意思。此计运用此象理，是说治军，有时采取适当的强刚手段便会得到应和，行险则遇顺。【按语】率数未服者以对敌，若策之不行，而利诱之，又反启其疑，于是故为自误，责他人之失，以暗警之。警之者，反诱之也。此盖以刚险驱之也。或曰：此遣将之法也。【故事】严军纪穰苴斩庄贾。 第二十七计 假痴不癫假装痴呆，掩人耳目，另有所图。【原典】宁伪作不知不为，不伪作假知妄为①。静不露机，云雷屯也②。【注释】①宁伪作不知不为，不伪作假知妄为：宁可假装着无知而不行动，不可以假装假知而去轻举妄动。②静不露机，云雷屯也：语出《易经．屯》卦。屯卦名。本卦为异卦相叠（震下坎上），震为雷，坎为雨，此卦象为雷雨并作，环境险恶，为事困难。“屯，难也”。《屯卦》的《彖》辞又说“云雷，屯。”坎为雨，又为云，震为雷。这是说，云行于上，雷动于下，云在上有压抑雷之象征，这是屯卦之卦象。此计运用此象理，是说在军事上，有时为了以退求进，必得假痴不癫，老成持重，以达后发制人。这就如同云势压住雷动，且不露机巧一样，最后一旦爆发攻击，便出其不意而获胜。【按语】假作不知而实知，假作不为而实不可为，或将有所为。司马懿之假病昏以诛曹爽，受巾帼假请命以老蜀兵，所以成功；姜维九伐中原，明知不可为而妄为之，则似痴矣，所以破灭。兵书曰：“故善战者之胜也，无智名，无勇功。”当其机未发时，静屯似痴；若假癫，则不但露机，则乱动而群疑。故假痴者胜，假癫者败。或日：假痴可以对敌，并可以用兵。宋代，南俗尚鬼。狄青征侬智高时，大兵始出桂林之南，因佯祝曰：“胜负无以为据。”乃取百钱自持，与神约，果大捷，则投此钱尽钱面也。左右谏止，傥不如意，恐沮师，青不听。万众方耸视，已而挥手一掷，百钱旨面。于是举兵欢呼，声震林野，青亦大喜；顾左右。取百丁（钉）来，即随钱疏密，布地而帖丁（钉）之，加以青纱笼，手自封焉。曰：“俟凯旋，当酬神取钱。”其后平邕州还师，如言取钱，幕府士大夫共祝视，乃两面钱也。【故事】燕王装疯夺皇权。 第二十八计 上屋抽梯上楼以后拿掉梯子。借指与人密谈。也用以比喻怂恿人，使人上当。【原典】假之以便，唆之使前，断其援应，陷之死地①。遇毒，位不当也②。【注释】①假之以便，唆之使前，断其援应，陷之死地：假，借。句意：借给敌人一些方便（即我故意暴露出一些破绽），以诱导敌人深入我方，乘机切断他的后援和前应，最终陷他于死地。②遇毒，位不当也：语出《易经．噬嗑》卦。噬嗑，卦名。本卦为异卦相叠（震下离上）。上卦为离为火，下卦为震为雷，是既打雷，又闪电，威严得很。又离为阴卦，震为阳卦，是阴阳相济，刚柔相交，以喻人要恩威并用，严明结合，故封名为“噬嗑”，意为咀嚼。本卦六三．《象》辞：“遇毒，位不当也。”本是说，抢腊肉中了毒（古人认为腊肉不新鲜，含有毒素，吃了可能中毒），因为六三阴兑爻于阳位，是位不当。此计运用此理，是说敌人受我之唆，犹如贪食抢吃，只怪自己见利而受骗，才陷于了死地。【按语】唆者，利使之也。利使之而不先为之便，或犹且不行。故抽梯之局，须先置梯，或示之梯。如：慕容垂、姚苌诸人怂秦苻坚侵晋，以乘机自起。【故事】刘琦登楼求妙计。 第二十九计 树上开花比喻将本求利，别人收获。语出《荡寇志》。【原典】借局布势，力小势大①。鸿渐于陆，其羽可用为仪也②。【注释】①借局布势，力小势大：句意为借助某种局面（或手段）布成有利的阵势，兵力弱小但可使阵势显出强大的样子。②鸿渐于陆，其羽可用为仪：语出《易经．渐》卦。渐，卦名，本卦为异卦相叠（艮下巽上）．上卦为巽为木，下卦为艮为山。卦象为木植长于山上，不断生长，也喻人培养自己的德性，进而影响他人，渐，即渐进。本卦上九说“鸿渐于陆，其羽可为仪，吉利，”是说鸿雁走到山头，它的羽毛可用来编织舞具这是吉利之兆。此计运用此理，是说弱小的部队通过凭借某种因素，改变外部形态之后，自己阵容显得充实强大了，就象鸿雁长了羽毛丰满的翅膀一样。【按语】此树本无花，而树则可以有花，剪彩贴之，不细察者不易发，使花与树交相辉映，而成玲珑全局也。此盖布精兵于友军之阵，完其势以威敌也。【故事】田单大摆火牛阵。 第三十计 反客为主本是客人却用主人的口气说话。后指在一定的场合下采取主动措施，以声势压倒别人。【原典】乘隙插足，扼其主机①，渐之进也②。【注释】①乘隙插足，扼其主机：把准时机插足进去，掌握他的要害关节之处。②渐之进也：语出《易经．渐》卦。（渐卦解释见前计②）本卦《彖》辞：“渐之进也。”意为渐就是渐进的意思。此计运用此理，是说乘隙插足，扼其主机。《易经．渐》卦上说的就是这个意思，要循序渐进。【按语】为人驱使者为奴，为人尊处者为客，不能立足者为暂客，能立足者为久客，客久而不能主事者为贱客，能主事则可渐握机要，而为主矣。故反客为主之局：第—步须争客位；第二步须乘隙；第三步须插足；第四足须握机；第五乃为主。为主，则并人之军矣；此渐进之阴谋也。如李渊书尊李密，密卒以败；汉高视势未敌项羽之先，卑事项羽。使其见信，而渐以侵其势，至垓下—役，—亡举之。【故事】郭子仪单骑退敌。 第六套 败战计处于败军态势之计谋，潜龙勿用。 第三十一计 美人计以美女诱人的计策。【原典】美人计美人计兵强者，攻其将；将智者，伐其情①。将弱兵颓，其势自萎。利用御寇，顺相保也②。【注释】①兵强者，攻其将；兵智者，伐其情：句意：对兵力强大的敌人，就攻击他的将帅，对明智的敌人，就打击他的情绪。②利用御寇，顺相保也：语出《易经．渐》卦。（卦名解释见计“树上开花”注②）本身九三《象》辞：“利御寇，顺相保也。”是说利于抵御敌人，顺利地保卫自己。此计运用此象理，是说利用敌人自身的严重缺点，己方顺势以对，使其自颓自损，己方一举得之。【按语】兵强将智，不可以敌，势必事先。事之以土地，以增其势，如六国之事秦：策之最下者也。事之以币帛，以增其富，如宋之事辽金：策之下者也。惟事以美人，以佚其志，以弱其体，以增其下之怨。如勾践以西施重宝取悦夫差，乃可转败为胜。【故事】报国仇西施赴吴。 第三十二计 空城计在敌众我寡的情况下，缺乏兵备而故意示意人以不设兵备，造成敌方错觉，从而惊退敌军之事。后泛指掩饰自己力量空虚、迷惑对方的策略。【原典】虚者虚之，疑中生疑①；刚柔之际②，奇而复奇。【注释】①虚者虚之，疑中生疑：第一个“虚”为名词，意为空虚的，第二个“虚”为动词，使动，意为让它空虚。全句意：空虚的就让它空虚，使他在疑惑中更加产生疑惑。空城计空城计②刚柔之际：语出《易经·解》卦。解，卦名。本卦为异卦相叠（坎下震上）。上卦为震为雷，下卦为坎为雨。雷雨交加，荡涤宇内，万象更新，万物萌生，故卦名为解。解，险难解除，物情舒缓。本卦初六．《象》辞“刚柔之际，义无咎也”，是使刚与柔相互交会，没有灾难。【按语】此计运用此象理，是说敌我交会，相战，运用此计可产生奇妙而又奇妙的功效。古人按语说：虚虚实实，兵无常势。虚而示虚，诸葛而后，不乏其人。如吐蕃陷瓜州，王君焕死，河西汹惧。以张守归圭为瓜州刺史，领余众，方复筑州城。版干（筑城墙用的夹板和立柱）裁立．敌又暴至。略无守御之具。城中相顾失色，莫有斗志。守圭日：“徒众我寡，又疮痍之后，不可以矢石相持，须以权道制之。”乃于城上，置酒作乐，以会将士。敌疑城中有备，不敢攻而退。又如齐祖铤为北徐州刺史，至州，会有阵寇百姓多反。铤不关城门，守陴者，皆令下城，静座街巷，禁断行人鸡犬。贼无所见闻，不测所以，或疑人走城空，不设警备。铤复令大叫，鼓噪聒天，贼大惊，顿时走散。 [2]【故事】失街亭孔明弄险。 第三十三计 反间计原指使敌人的间谍为我所用，或使敌人获取假情报而有利于我的计策。后指用计谋离间敌人引起内讧。【原典】疑中之疑①。比之自内，不自失也②。【注释】①疑中之疑：句意为在疑阵中再布疑阵。②比之自内，不自失也：语出《易经·比》卦。比，卦名，本卦为异卦相叠（坤下坎上）。本卦上卦为坎为为相依相赖，故名“比”。比，亲比，亲密相依。本纷六二。《象》辞：“比之自内，不自失也。”此计运用此象理，是说在布下一重重的疑阵之后，能使来自敌内部的间谍归顺于我。【按语】间者，使敌自相疑忌也；反间者，因敌之间而间之也。如燕昭王薨，惠王自为太子时，不快于乐毅。田单乃纵反间曰：“乐毅与燕王有隙，畏诛，欲连兵王齐，齐人未附。故且缓攻即墨，以待其事。齐人唯恐他将来，即墨残矣。惠王闻之，即使骑劫代将，毅遂奔赵。又如周瑜利用曹操间谍，以间其将；陈平以金纵反间于楚军，间范增，楚王疑而去之。亦疑中之疑之局也。【故事】群英会蒋干中计。 第三十四计 苦肉计故意毁伤身体以骗取对方信任，从而进行反间的计谋。【原典】人不自害，受害必真；假真真假，间以得行①。童蒙之吉，顺以巽也②。【注释】①人不自害，受害为真；假真真假，间以得行：（正常情况下）人不会自我伤害，若他受害必然是真情；（利用这种常理）我则以假作真，以真作假，那么离间计就可实行了。②童蒙之吉，顺以巽也：语出《易经．蒙》卦（卦名解释见第十四计注）。本卦六五．《象》辞：“童蒙之吉，顺以巽也。”本意是说幼稚蒙昧之人所以吉利，是因为柔顺服从。本计用此象理，是说用采用这种办法欺骗敌人，就是顺应着他那柔弱的性情达到目的。【按语】间者，使敌人相疑也；反间者，因敌人之疑，而实其疑也；苦肉计者，盖假作自间以间人也。凡遣与己有隙者以诱敌人，约为响应，或约为共力者：皆苦肉计之类也。如：郑武公伐胡而先以女妻胡君，并戮关其思；韩信下齐而骊生遭烹。【故事】王佐断臂诈投金，黄盖诈降曹操。 第三十五计 连环计本为元杂剧名。剧本写汉末董卓专权，王允设计，先许嫁美女貂蝉与吕布，后又献给董卓，以离间二人，致使吕布杀死董卓。后用以指一个接一个相互关联的计策。【原典】将多兵众，不可以敌，使其自累，以杀其势。在师中吉，承天宠也①。【注释】①在师中古，承天变也：语出《易经．师》卦（卦名讲释见前第二十六计注）。本卦九二．《象》辞：“在师中吉，承天宠也”是说主帅身在军中指挥，吉利，因为得到上天的宠爱。此计运用此象理，是说将帅巧妙地运用此计，克敌制胜，就如同有上天护佑一样。【按语】庞统使曹操战舰勾连，而后纵火焚之，使不得脱。则连环计者，其结在使敌自累，而后图之。盖一计累敌，—计攻敌，两计扣用，以摧强势也。如宋毕再遇赏引敌与战，且前且却，至于数四。视日已晚，乃以香料煮黑，布地上。复前博战，佯败走。敌乘胜追逐。其马已饥，闻豆香，乃就食，鞭之不前。遇率师反攻，遂大胜。皆连环之计也。【故事】献貂蝉王允除董卓。 第三十六计 走为上计指战争中看到形势对自己极为不利时就逃走。现多用于做事时如果形势不利没有成功的希望时就选择退却、逃避的态度。【原典】全师避敌①。左次无咎，未失常也②【注释】①全师避敌：全军退却，避开强敌。②左次无咎：未失常也：语出《易经．师》卦（卦名解释见前二十六计注）。本卦六四．《象》辞：“左次无咎，未失常也。”是说军队在左边扎营，没有危险，（因为扎营或左边或右边，要依时情而定）并没有违背行军常道。【按语】敌势全胜，我不能战。则：必降；必和；必走。降则全败，和则半败，走则未败。未败者，胜之转机也。如宋毕再遇与金人对垒，度金兵至者日众，难与争锋。—夕拔营去，留旗帜于营，豫缚生羊悬之，置其前二足于鼓上，羊不堪悬，则足击鼓有声。金人不觉为空营，相持数日，乃觉，欲追之，则已远矣。（《战略考．南宋》）可谓善走者矣。]]></content>
      <categories>
        <category>日常生活</category>
      </categories>
      <tags>
        <tag>日常生活</tag>
        <tag>36计解说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年上半年阅读总结]]></title>
    <url>%2F2018%2F06%2Fmy-post4%2F</url>
    <content type="text"><![CDATA[上半年看了一些书，简单总结一下 坚持阅读古人云：“活到老，学到老。” IT技术发展太快，行业日新月异，作为最苦逼职业之一，软件工程师，只能不停的学习、深造、提升。总之，学不可以已，所以，保持良好的心态，持之以恒，这个很重要。 以下是今年上半年阅读的相关书籍，这里分享七本： 1.《亿级流量-高并发高可用架构实战》张开涛 江湖人称”涛哥”，京东大牛，一次偶然的机会，通过中生代技术了解到了这本书，一些大牛的公众号也有推荐过此书，真正的干货实战书。 去年下半年购买入手，读过了一次。当时正在紧急开发一个互联网项目，用户体量和访问流量预估还不低，虽然有过类似项目的架构设计和开发经验，但当时内心还是有一些忐忑，毕竟没有做过真正的大日活互联网的产品项目，目前月活千万左右，当时整个业务复杂程度也不低，顶着开发时间压力和上线压力，推进项目往前走，而负责整个后台技术架构，我急需系统化地补充和丰富加强这方面的知识，正当焦虑不已、烦恼失眠的时候拥有了此书，仿佛得到了神助攻，系统化地学到了一线互联网公司常见的技术实战经验，和能直接实施落地的解决方案，完整且系统地介绍了”高并发””高可用”这六个字涵盖了几乎所有的方方面面，帮到了我很多很多。今年年初又读了一遍，同时把它也作为了自己的一本常用字典书，温故而知新。 如果你也有和我同样遇到了这方面的需要，此书你一定不能错过，任何一位架构师或者立志成为架构师的你，真的应该读一读此书。 2.《高性能Mysql》第三版 这本书常年进入到技术类的畅销榜单，应用Mysql的必备工具书之一，很多人都推荐过。像我们目前作为一个月活千万的产品，日数据量增速也不低，一个良好且稳定的数据库设计非常重要。 当时产品项目上线后，由于前期的数据库表设计不当，导致扩展性低，索引问题、Sql问题等引发了好几次线上故障，DB的CPU/读写IO分别接连遭遇爆表，修复BUG折腾到几乎怀疑人生。由于使用了阿里云的RDS，硬件基础设施优化倒不用怎么考虑，更多地是在上层优化，学习和实践。 比如不同存储引擎的区别是什么？索引原理是什么？索引到底应该怎么建、选择哪种类型、哪种算法？各自实际场景该如何选择？分库分表、读写分离如何实施？分表算法使用哪种高效、稳定性和扩展性高？主从延迟大怎么办？在线数据迁移如何最大化减轻对线上的影响？分布式下主键值怎么生成、空间占用最小、检索性能最好？Sql怎么编写性能高、效率高？如何避免sql中的索引失效？查询慢具体原因是什么？执行计划各个指标如何查看评估和分析？等等一系列的问题，这本书中的一些章节内容帮到了我很多，同时美团技术团队分享出来的这方面文章，我csdn博客中有转载此类文章，也学到了很多一线的实战内容。 3.《阿里巴巴JAVA开发手册》，阿里巴巴 去年11月云溪大会时，阿里推出了一系列技术群书，此书是其中一本，于年初入手了。阿里，作为国内JAVA重度使用者之一，首次披露内部的开发标准和规范，目的是：码出高效，码出质量。 从严格意义上讲，本书超越了Java语言本身，明确作为一名合格开发者应该具备的基本素质，本书以开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL数据库、工程结构、设计规约七个维度，每个条目下有相应的扩展解释和说明，正例和反例，全面、立体、形象地帮助到开发者的成长和团队代码规约文化的形成。 我一直觉得：一个优秀的工程师和一个普通工程师的区别，不是满天飞的架构图，他的功底体现在所写的每一行代码上，”talk is cheap, show me the code”，也一直都是我的IT编程座右铭之一。 以阿里的技术底蕴为基础打造的此书，一定不会让你失望的。技术没有终点站，只有不断打磨技术，去成为更好的自己，我们共勉。 4.《口渴之前先挖井》哈维·麦凯 一次偶然机会入手了此书，在一个技术牛人公众号中看到推荐了此书，单看书名就有点意思想买了。如果你认为是鸡汤书，那你就大错特错了。 如今社会，各行各业，无论你多聪明，无论你多有天赋，你都不可能只依靠一己之力。成功人士所共有的一个特点，那就是：他们都有很强的创建并维护一个人际网的能力，拥有高质量、靠谱稳定的朋友圈。人际网的建设，其实是最应该学会的处世本领，无论多年轻都可以，学得越早、受益越多。 书中有很多案讲解，比如如何建立并扩大自己的人际网？有哪些套路？比如，不要在一场聚会上获取25张业务名片，泛泛之交是没有用的。最佳的方法是，在参加一个聚会或商业会议时，一次只认识2到3个人，然后对他们作深入的了解。再比如，如何与久未联系的同事或朋友保持亲密的关系？首先要做的，是去朋友那里，看有什么可以帮助的。记住最好的方法就是，不要求别人为你做什么，只要想能为别人做什么，这才是建立人际网的真正艺术。 滴水之恩，要涌泉相报，人对我好，我十倍还之，反之，则道不同不相为谋，避而远之即可。如果你想知道关于更多的关系人际关系建设内容，可以读一读此书。 5.《智能时代》，吴军 一直对吴军的书很中意，像《浪潮之巅》《数学之美》等，此书也是逻辑思维推荐的畅销书之一。 此书的内容，从数据对人类的作用，数据如何从量变到质变，数据如何推动思维革命，数据在商业上起到的作用，数据如何收集和确保安全，数据和人类隐私的关系，再到数据带来的智能革命对于社会所产生的影响。所有的思维、思考，描述得行云流水，阐释得十分简练清晰，一气呵成读完，十分酣畅淋漓的感觉，有人称他是”中国版的普罗米修斯”。 吴军认为，在智能时代，只有2%的人能够脱颖而出，其余98%的人将成为鱼腩。那时，大量的工作岗位消失，大量的人被迫离开熟悉的环境和生活，费解于社会的巨变，陷入命运的颠簸。在智能革命到来之际，我们要么加入到这次浪潮中，要么观望徘徊，最后被淘汰。但也只有2%的喜欢吃螃蟹的人愿意加入到机器智能的队伍中来。任何一次技术革命，最初受益的都是发展它、使用它的一代，而远离他、拒绝接受他的人，在很长时间里都将是迷茫的一代。简言之，面对人工智能，要么拥抱，要么死去。因为，这既是一个让人振奋不已的时代，也是一个充满空前挑战的时代，而我，就是一个特别喜欢做挑战的事的人。 好吧(∩_∩)，我知道你也许读到这里焦虑迷茫了，不用着急，读一读此书，你也许就轻松开朗了。 6.《人工智能》，李开复 加上《未来简史》《智能时代》，这是我读的第三本关于AI，人工智能，关于未来的书了。 这本书，主题上讨论了个人应该做些什么，才能避免被AI取代？企业应该如何升级，才能在新的商业变局到来前抓住先机？有关于思考未来商业产品应用，也讲了个人在人工智能时代该如何学习，比较有价值。 三本书，体会着三个不同人思考的方式和观察角度。总体上感觉李的书，故事性更强一些，可以作为初级的人工智能科普书。 的确，刚开始看完了是有些焦虑，但我也不担忧和惧怕人工智能时代的到来，还是觉得当下要做的，应当是尽早认清AI是什么，了解其规律，思考商业产品应用，与自身个人实际情况相结合，去拥抱新时代的到来，投入其中。 7.《DevOps实战三十六计》，高效运维社区 我算是第一批加入高效运维社区群的人之一，很早就关注到了DevOps，期待本书很久了。它是Development（开发）和Operation（运维）两个单词的缩写，它以自动化为基本，以配合协作为黏合剂，以服务业务为己任，从调研、需求、设计到开发、测试，安装、运维及运营，贯串于软件的全部生命周期。 DevOps是目前加快从需求到应用上线的上好途径，涵盖了产品设计、敏捷开发、微服务设计、持续集成和部署、自动化运维等各个关键环节。DevOps源于技术，但又超越技术。 此书，从精益、敏捷、开发、测试、运维、架构、安全等各个方面分享他们在顶级互联网公司及领先的传统企业的多年智慧和经验总结，分享了很多踩过的坑，以及经历的血的教训，常备的实用工具书之一。 总结我一直都觉得，阅读是一件值得培养和养成习惯的事情，希望自己能一直坚持下去，保持这个良好的习惯。不太喜欢电子书，还是更多地喜欢纸质的阅读感受。 下半年了，给自己制定了新的学习计划、阅读计划，希望能学到更多的东西，以及实践经验，能走得更远、更稳、更好。 共勉，(๑•̀ㅂ•́)و✧加油，Minbo 其他推荐技术类书 重构-改善既有代码的设计 Clean Code 代码整洁之道 设计模式 非技术类书 番茄时间管理法 高效能人士的七个习惯 拖延心理学]]></content>
      <categories>
        <category>人工智能</category>
        <category>AI</category>
        <category>阅读</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>架构</tag>
        <tag>阅读</tag>
        <tag>AI</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[到底什么是微服务？]]></title>
    <url>%2F2017%2F06%2Fmy-post3%2F</url>
    <content type="text"><![CDATA[微服务到底意味着什么？它与以往的开发架构有何不同？ 背景最近几年，越来越多的开发人员使用“微服务”一词来阐述他们的系统或应用架构，当然或许这只是他们在吹嘘自己在技术潮流中并未落伍。我认为，IT科技行业的人士至少要了解微服务的基础知识，因为它代表着未来的发展方向。即使对我的话半信半疑，还有行业内很多大神为我背书。只是，话说回来，到底什么是微服务呢？ 微服务架构 上图从左到右说明左：单体架构下，应用紧耦合，所有的变更必须一起上线，持续部署就是天方夜谭。中：传统SOA架构允许单独的变更，但是每一个部分必须很谨慎地修改以免破坏整体架构设计。右：在微服务架构下，开发可以独立地创建、维护和改进服务。服务之间通过API连接。 首先，确切地说，当谈到微服务时，我们实际上是指微服务架构。这是一种独特的架构设计模式，它将是软件、web或移动应用拆分为一系列独立的服务——如微服务。这些服务仅用于某一个特定的业务功能，例如：用户管理、用户角色、电子商务购物车、搜索引擎、社交媒体登录等。此外，它们是相互独立的，这意味着它们可以采用不同的编程语言和数据存储。微服务中几乎不存在集中管理，它使用轻量级的HTTP、REST或Thrift API来进行内部通信。 当然有些人会问：嘿，这和SOA有什么不一样？某种程度上，你可以说微服务首先实现了面向服务的架构目标。然而，两种架构之间仍然存在差异。通常，经典的SOA适用于部署一体化架构应用，并且更倾向于平台驱动，而微服务必须是可独立部署的，因此在各个维度上提供了更多的灵活性。当然，最主要的区别应该是规模的不同，“微观”——这个词一听就比常规的SOA要小得多。正如Martin Fowler所说，我们应该将SOA视为微服务的超集。 话虽如此，我们并不把微服务视为革命性的突破，它更像是软件开发进化史中自然而然地往前迈了一步。 微服务的优点与物理世界（PC硬件、宜家家具、汽车等）中的模块化趋势类似，微服务的理念是允许开发人员基于各种独立组件来构建应用程序，这些组件可以轻松更改、删除或升级，而不会影响整个应用程序——这与一体化架构完全不同。这是这种新型架构的主要优点之一。除此之外，某些微服务（例如：文件上传服务）一次开发完成之后，开发人员可以在其他项目中重用该代码的功能。 微服务的另一个重要特征是，与单一应用程序不同的是——单一程序根据应用程序的不同层级来定义团队：用户界面团队，服务器端团队，数据库团队等——微服务允许公司围绕特定业务功能来构建团队。这反过来又驱使团队具备了跨职能能力，从而拥有了一系列更强大的技能：用户体验、数据库管理、项目管理等。这使我们进一步走进DevOps时代。 服务的分散管理使开发人员能够根据特定业务需求选用不同的编程语言，这取决于他们认为哪种语言才是围绕微服务构建的最佳选择。这也意味着他们可以使用独立的数据存储，从而获得这种架构的最大优势——几乎无限的可扩展性。在微服务多地部署完成后，您只需要调整所需的功能，而不是每次都创建整个应用程序的重复实例。这反过来又节省了时间和资源。 在谈到微服务时，不可避免地要提到容器。容器旨在减少运行时所需要的最小可行部件，而不是在同一物理或虚拟机中打包多个功能。话虽如此，容器只是可以优化部署的工具，所以在无容器化环境中，基于微服务架构构建应用程序也不是不可能的。 总结总而言之，微服务的目标是通过将应用程序分解成较小的可组合的部分，以便在需要时可以独立部署、升级、删除或缩放，从而简化构建、维护和管理应用程序。 推荐资料 SprintBoot学习文档 SpringCloud学习文档 Docker学习文档 SprintBoot案例源码 SpringCloud案例源码]]></content>
      <categories>
        <category>架构</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>JAVA</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据技术学习路线]]></title>
    <url>%2F2017%2F06%2Fmy-post2%2F</url>
    <content type="text"><![CDATA[背景近年来大数据BigData、人工智能AI、物联网Iot等行业发展迅猛，很多人都想要从事大数据技术开发工作，但是，请问要怎么做，路线是什么？从哪里开始学？学哪些？这是一个大问题。对于我自己来说，最近也在学一些大数据开发相关的技术，所以之前整理了一份《大数据技术学习路线》，希望对你有所帮助。 学习规划总共分为五大部分，分别是： 大数据技术基础 离线计算Hadoop 流式计算Storm 内存计算Spark 机器学习算法 目前我学完了约60%的内容，但还有很多需要多实践、和深研的地方，我也在继续学习，和摸索当中。希望你早日能成为大数据技术开发中的一员，然后大家一起学习，和技术交流。 技术说明这里我只列举了技术点，给你提供了一个学习方向，具体实现内容可以借助网络去学习了，相信这方面你应该懂得了如何借助网络力量，然后进行自我学习了。 大数据技术基础linux操作基础 linux系统简介与安装 linux常用命令–文件操作 linux常用命令–用户管理与权限 linux常用命令–系统管理 linux常用命令–免密登陆配置与网络管理 linux上常用软件安装 linux本地yum源配置及yum软件安装 linux防火墙配置 linux高级文本处理命令cut、sed、awk linux定时任务crontab shell编程 shell编程–基本语法 shell编程–流程控制 shell编程–函数 shell编程–综合案例–自动化部署脚本 内存数据库redis redis和nosql简介 redis客户端连接 redis的string类型数据结构操作及应用-对象缓存 redis的list类型数据结构操作及应用案例-任务调度队列 redis的hash及set数据结构操作及应用案例-购物车 redis的sortedset数据结构操作及应用案例-排行榜 布式协调服务zookeeper zookeeper简介及应用场景 zookeeper集群安装部署 zookeeper的数据节点与命令行操作 zookeeper的java客户端基本操作及事件监听 zookeeper核心机制及数据节点 zookeeper应用案例–分布式共享资源锁 zookeeper应用案例–服务器上下线动态感知 zookeeper的数据一致性原理及leader选举机制 java高级特性增强 Java多线程基本知识 Java同步关键词详解 java并发包线程池及在开源软件中的应用 Java并发包消息队里及在开源软件中的应用 Java JMS技术 Java动态代理反射 轻量级RPC框架开发 RPC原理学习 Nio原理学习 Netty常用API学习 轻量级RPC框架需求分析及原理分析 轻量级RPC框架开发 离线计算Hadoophadoop快速入门 hadoop背景介绍 分布式系统概述 离线数据分析流程介绍 集群搭建 集群使用初步 HDFS增强 HDFS的概念和特性 HDFS的shell(命令行客户端)操作 HDFS的工作机制 NAMENODE的工作机制 java的api操作 案例1：开发shell采集脚本 MAPREDUCE详解 自定义hadoop的RPC框架 Mapreduce编程规范及示例编写 Mapreduce程序运行模式及debug方法 mapreduce程序运行模式的内在机理 mapreduce运算框架的主体工作流程 自定义对象的序列化方法 MapReduce编程案例 MAPREDUCE增强 Mapreduce排序 自定义partitioner Mapreduce的combiner mapreduce工作机制详解 MAPREDUCE实战 maptask并行度机制-文件切片 maptask并行度设置 倒排索引 共同好友 federation介绍和hive使用 Hadoop的HA机制 HA集群的安装部署 集群运维测试之Datanode动态上下线 集群运维测试之Namenode状态切换管理 集群运维测试之数据块的balance HA下HDFS-API变化 hive简介 hive架构 hive安装部署 hvie初使用 hive增强和flume介绍 HQL-DDL基本语法 HQL-DML基本语法 HIVE的join HIVE 参数配置 HIVE 自定义函数和Transform HIVE 执行HQL的实例分析 HIVE最佳实践注意点 HIVE优化策略 HIVE实战案例 Flume介绍 Flume的安装部署 案例：采集目录到HDFS 案例：采集文件到HDFS 流式计算StormStorm从入门到精通 Storm是什么 Storm架构分析 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Storm集群部署实战 Storm+Kafka+Redis业务指标计算 Storm源码下载编译 Strom集群启动及源码分析 Storm任务提交及源码分析 Storm数据发送流程分析 Storm通信机制分析 Storm消息容错机制及源码分析 Storm多stream项目分析 编写自己的流式任务执行框架 Storm上下游及架构集成 消息队列是什么 Kakfa核心组件 Kafka集群部署实战及常用命令 Kafka配置文件梳理 Kakfa JavaApi学习 Kafka文件存储机制分析 Redis基础及单机环境部署 Redis数据结构及典型案例 Flume快速入门 Flume+Kafka+Storm+Redis整合 内存计算Sparkscala编程 scala编程介绍 scala相关软件安装 scala基础语法 scala方法和函数 scala函数式编程特点 scala数组和集合 scala编程练习（单机版WordCount） scala面向对象 scala模式匹配 actor编程介绍 option和偏函数 实战：actor的并发WordCount 柯里化 隐式转换 AKKA与RPC Akka并发编程框架 实战：RPC编程实战 Spark快速入门 spark介绍 spark环境搭建 RDD简介 RDD的转换和动作 实战：RDD综合练习 RDD高级算子 自定义Partitioner 实战：网站访问次数 广播变量 实战：根据IP计算归属地 自定义排序 利用JDBC RDD实现数据导入导出 WorldCount执行流程详解 RDD详解 RDD依赖关系 RDD缓存机制 RDD的Checkpoint检查点机制 Spark任务执行过程分析 RDD的Stage划分 Spark-Sql应用 Spark-SQL Spark结合Hive DataFrame 实战：Spark-SQL和DataFrame案例 SparkStreaming应用实战 Spark-Streaming简介 Spark-Streaming编程 实战：StageFulWordCount Flume结合Spark Streaming Kafka结合Spark Streaming 窗口函数 ELK技术栈介绍 ElasticSearch安装和使用 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Spark核心源码解析 Spark源码编译 Spark远程debug Spark任务提交行流程源码分析 Spark通信流程源码分析 SparkContext创建过程源码分析 DriverActor和ClientActor通信过程源码分析 Worker启动Executor过程源码分析 Executor向DriverActor注册过程源码分析 Executor向Driver注册过程源码分析 DAGScheduler和TaskScheduler源码分析 Shuffle过程源码分析 Task执行过程源码分析 机器学习算法python及numpy库 机器学习简介 机器学习与python python语言–快速入门 python语言–数据类型详解 python语言–流程控制语句 python语言–函数使用 python语言–模块和包 phthon语言–面向对象 python机器学习算法库–numpy 机器学习必备数学知识–概率论 常用算法实现 knn分类算法–算法原理 knn分类算法–代码实现 knn分类算法–手写字识别案例 lineage回归分类算法–算法原理 lineage回归分类算法–算法实现及demo 朴素贝叶斯分类算法–算法原理 朴素贝叶斯分类算法–算法实现 朴素贝叶斯分类算法–垃圾邮件识别应用案例 kmeans聚类算法–算法原理 kmeans聚类算法–算法实现 kmeans聚类算法–地理位置聚类应用 决策树分类算法–算法原理 决策树分类算法–算法实现 尾记 看完有信心能坚持学习吗？如果你的答案是肯定的，那就当下开始行动吧！Fighting~ 推荐两个相关的学习博客地址： Hadoop学习教程 Hadoop家族系列文章 Hadoop使用教程]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据技术学习路线]]></title>
    <url>%2F2017%2F06%2Fpython%2Fpython%E5%9F%BA%E7%A1%80%2F20190211_python%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[牛客网python3: https://www.nowcoder.com/tutorial/10005/dc2c82d6557548beb0e2252869be13d8 用任何编程语言来开发程序，都是为了让计算机干活，比如下载一个MP3，编写一个文档等等，而计算机干活的CPU只认识机器指令，所以，尽管不同的编程语言差异极大，最后都得“翻译”成CPU可以执行的机器指令。而不同的编程语言，干同一个活，编写的代码量，差距也很大。比如，完成同一个任务，C语言要写1000行代码，Java只需要写100行，而Python可能只要20行；C程序运行1秒钟，Java程序可能需要2秒，而Python程序可能就需要10秒 Java占据了世界上绝大部分电商，金融，通信等服务端应用的开发；而C,C++占据了世界上大部分贴近操作系统的硬件编程； 编译型语言：c,c++,Go,Swift,Object-c,Pascal解释型语言：JavaScript,Python,Rby,PHP,Perl,Erlang混合型：Java,C# python介绍:是一种解释型，面向对象的语言;由吉多·范罗苏姆（Guido van Rossum）于1989年发明，1991年正式公布；官网 www.python.org;设计哲学：优雅，明确，简单。 许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。 python的历史:1. 1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 2. 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。 3. 1994年1月：Python 1.0正式发布。 4. 2000年10月16日：Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。 5. 2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。 6.2009年6月：Python发布3.1了版本。 7.2011年2月：Python发布3.2了版本。 8.2012年9月：Python发布3.3了版本。 9.2014年3月：Python发布了3.4版本。 10.2015年9月：Python发布了3.5版本。 11.2016年12月：Python发布了3.6版本。 目前我们使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为《Python简史》的博文。 python的优缺点:Python的优点很多，简单的可以总结为以下几点。 简单和明确，做一件事只有一种方法。 学习曲线低，跟其他很多语言相比，Python更容易上手。 开放源代码，拥有强大的社区和生态圈。 解释型语言，天生具有平台可移植性。 对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。 可扩展性和可嵌入性，例如在Python中可以调用C/C++代码。 代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。 Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。 Python还有大量的第三方库 Python的缺点主要集中在以下几点。 1. 执行效率稍低，因此计算密集型任务可以由C/C++编写。 2. 代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。 3. 在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。 python的用途： WEB应用：Facebook 豆瓣⋯ 爬虫程序： 网络数据采集 科学计算： 云基础设施 自动化运维; 大数据（数据清洗）：科学计算和可视化、数据分析、量化交易 云计算; 桌面软件/游戏; 人工智能：机器人开发、自然语言处理、图像识别; GUI开发 python的解释器分类： CPython（官方）: 用c语言编写的Python解释器; IPython是基于CPython之上的一个交互式解释器，只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。 PyPy : 用Python语言编写的Python解释器; IronPython : 用.net编写的Python解释器; Jython : 用Java编写的Python解释器,可直接调用java类库，适合在java平台上开发 python2 和 python3的区别：1. python3中，print不再是关键字，而是函数， 2. 比如原来是 print ‘abc’ 现在是 print(‘abc’)但是 python2.6+ 可以使用 from future import print_function 来实现相同功能 3. 在Python 3中，没有旧式类，只有新式类， 4. 原来1/2（两个整数相除）结果是0，现在是0.5了， 5. 新的字符串格式化方法format取代%,从 python2.6+ 开始已经在str和unicode中有该方法, 同时 python3依然支持 % 算符 6. 对 bytes 和 原生 UNICODE 字符串的支持, 删除了 unicode 对象, str 为原生 unicode 字符串, bytes 替代了之前的 str. 7. xrange重命名为range。同时更改的还有一系列内置函数及方法, 都返回迭代器对象, 而不是列表或者 元组, 比如 filter, map, dict.items 等 8. != 取代 &lt; &gt; 在python2中 也很少有人用 &lt; &gt; 所以影响不大 9. 某些类库的变化，组织结构变了些. 但功能没变. urlparse - &gt; urllib.parse 这样的变化 12import thisprint(this) # 可以看到Tim Peter撰写的“Python之禅”]]></content>
      <categories>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的个人博客系统终于实施落地了]]></title>
    <url>%2F2017%2F04%2Fmy-post1%2F</url>
    <content type="text"><![CDATA[背景由于一直饱受CSDN博客的大量植入广告，实在是不堪其扰，所以总想着能自己从零开始搭建一套个人博客系统，完全自由实现，同时拥有能高度自定义的博客系统，今天终于实施落地了。 目标近年来，看了一些书，同时，随着工作年限的增长，对工作、学习、生活等方面都有了一定的认知和感触，所以想输出点东西落地，写点东西，一方面降低自己的大脑中知识存储容量，另一方面也为了将来回头看时，还能欣慰自己曾经留下了一点东西。 规划先定一个小目标，今天规划了第一期，为期十篇的文章Topic，以及第二期的引子Topic。慢慢输出吧，敬请期待，加油(๑•̀ㅂ•́)و✧加油 第一期 Topic 我为什么要搭建自己的博客系统？ 我们到底要招聘一个怎样的IT职业者？ 如何进行高效率地学习？ 英文要不要学？如何学？ 为什么要培养一到两个长期的业余爱好？ 我为什么要做一名终生学习者？ 如何做一个团队管理者？ 你要多读书吗？怎么读？ 我是如何做自己职业规划的。 怎么做时间管理？ 第二期 Topic 《剑指IT Offer系列》 《阅读书单系列》 其它123456import randomli = []for i in range(6): r = random.randrange(65, 91) li.append(chr(r))print(''.join(li))]]></content>
      <categories>
        <category>Thinking</category>
      </categories>
      <tags>
        <tag>启始篇</tag>
        <tag>博客</tag>
        <tag>预热</tag>
      </tags>
  </entry>
</search>
